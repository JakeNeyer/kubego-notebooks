import { Injectable } from '@angular/core';
import { parse } from 'date-fns';
import { isEqual } from 'date-fns';
import { setHours } from 'date-fns';
import { setMinutes } from 'date-fns';
import { setSeconds } from 'date-fns';
import { distanceInWords } from 'date-fns';
import { differenceInSeconds } from 'date-fns';
import memoize from 'lodash-es/memoize';
import * as i0 from "@angular/core";
export const defaultDateOptions = {
    weekday: 'short',
    year: 'numeric',
    month: 'short',
    day: 'numeric',
};
export const defaultTimeOptions = {
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric',
    hour12: false,
};
const intlOptions = Object.assign({}, defaultDateOptions, defaultTimeOptions);
function dateTimeFormat(obj) {
    return new Intl.DateTimeFormat(obj.locale, obj.options).format(obj.date);
}
const memoizedDateTimeFormat = memoize(dateTimeFormat);
export class DateTimeService {
    constructor() { }
    parse(date) {
        // https://date-fns.org/v1.29.0/docs/parse
        return parse(date);
    }
    isEqual(date1, date2) {
        // This helper should be used whenever testing if two date objects
        // represent the same point in time is required. Note that equality
        // operators perform an identity check on Date objects, and thus do not
        // work as expected.
        return isEqual(date1, date2);
    }
    intlFormat(date, options, locale) {
        if (date == null) {
            return '-';
        }
        if (typeof date === 'string') {
            date = new Date(date);
        }
        if (!options) {
            options = intlOptions;
        }
        if (!locale) {
            locale = navigator.language || 'en-US';
        }
        return memoizedDateTimeFormat({ locale, options, date });
    }
    merge(date, time) {
        // FIXME: Return an invalid date object or raise an error if the input
        // is invalid.
        let dateTime = parse(date);
        const timeArr = time.split(':');
        let hours = parseInt(timeArr[0], 10);
        let minutes = parseInt(timeArr[1], 10);
        let seconds = parseInt(timeArr[2], 10);
        if (this.isNotValidNumber(hours) || !this.isValidHours(hours)) {
            hours = 0;
        }
        if (this.isNotValidNumber(minutes) || !this.isValidMinutes(minutes)) {
            minutes = 0;
        }
        if (this.isNotValidNumber(seconds) || !this.isValidSeconds(seconds)) {
            seconds = 0;
        }
        dateTime = setHours(dateTime, hours);
        dateTime = setMinutes(dateTime, minutes);
        dateTime = setSeconds(dateTime, seconds);
        return dateTime;
    }
    distanceInWords(dateToCompare, date = new Date()) {
        return distanceInWords(date, dateToCompare, {
            includeSeconds: false,
            addSuffix: true,
        })
            .replace('about', '')
            .replace('almost', '');
    }
    isNotValidNumber(unit) {
        return Number.isNaN(unit);
    }
    isValidHours(hours) {
        return this.between(hours, 0, 24);
    }
    isValidMinutes(minutes) {
        return this.between(minutes, 0, 60);
    }
    isValidSeconds(seconds) {
        return this.between(seconds, 0, 60);
    }
    between(x, min, max) {
        return x >= min && x <= max;
    }
    differenceInSeconds(d1, d2) {
        return differenceInSeconds(d1, d2);
    }
}
DateTimeService.ɵfac = function DateTimeService_Factory(t) { return new (t || DateTimeService)(); };
DateTimeService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DateTimeService, factory: DateTimeService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DateTimeService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,