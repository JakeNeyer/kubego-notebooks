import { get as getAttributeValue } from 'lodash';
import { STATUS_TYPE } from '../status/types';
export class StatusValue {
    constructor(config = {}) {
        this.defaultValues = {
            field: 'status',
            fieldPhase: '',
            fieldMessage: '',
            fieldState: '',
        };
        const { field, valueFn, fieldPhase, fieldMessage, fieldState } = Object.assign(Object.assign({}, this.defaultValues), config);
        this.field = field;
        this.valueFn = valueFn;
        this.fieldPhase = fieldPhase;
        this.fieldMessage = fieldMessage;
        this.fieldState = fieldState;
    }
    getPhase(row) {
        if (this.valueFn) {
            return this.valueFn(row).phase;
        }
        if (!this.fieldPhase) {
            return getAttributeValue(row, this.field + '.phase');
        }
        return getAttributeValue(row, this.fieldPhase);
    }
    getState(row) {
        if (this.valueFn) {
            return this.valueFn(row).state;
        }
        if (!this.fieldPhase) {
            return getAttributeValue(row, this.field + '.state');
        }
        return getAttributeValue(row, this.fieldState);
    }
    getMessage(row) {
        if (this.valueFn) {
            return this.valueFn(row).message;
        }
        if (!this.fieldPhase) {
            return getAttributeValue(row, this.field + '.message');
        }
        return getAttributeValue(row, this.fieldMessage);
    }
    getIcon(row) {
        switch (this.getPhase(row)) {
            case STATUS_TYPE.READY: {
                return 'check_circle';
            }
            case STATUS_TYPE.READY: {
                return 'warning';
            }
            case STATUS_TYPE.UNAVAILABLE: {
                return 'timelapse';
            }
            case STATUS_TYPE.ERROR: {
                return 'error';
            }
            default: {
                return 'warning';
            }
        }
    }
    getCssClasses(row) {
        return [this.getPhase(row), 'status'];
    }
    getTooltip(row) {
        return this.getMessage(row);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva3ViZWZsb3cvc3JjL2xpYi9yZXNvdXJjZS10YWJsZS90eXBlcy9zdGF0dXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFVLE1BQU0saUJBQWlCLENBQUM7QUFVdEQsTUFBTSxPQUFPLFdBQVc7SUFjdEIsWUFBWSxTQUF1QixFQUFFO1FBUDdCLGtCQUFhLEdBQWlCO1lBQ3BDLEtBQUssRUFBRSxRQUFRO1lBQ2YsVUFBVSxFQUFFLEVBQUU7WUFDZCxZQUFZLEVBQUUsRUFBRTtZQUNoQixVQUFVLEVBQUUsRUFBRTtTQUNmLENBQUM7UUFHQSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxtQ0FDekQsSUFBSSxDQUFDLGFBQWEsR0FDbEIsTUFBTSxDQUNWLENBQUM7UUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDO0lBRUQsUUFBUSxDQUFDLEdBQVE7UUFDZixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUNoQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLE9BQU8saUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUM7U0FDdEQ7UUFFRCxPQUFPLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFRO1FBQ2YsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDaEM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixPQUFPLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsT0FBTyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxVQUFVLENBQUMsR0FBUTtRQUNqQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztTQUNsQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLE9BQU8saUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLENBQUM7U0FDeEQ7UUFFRCxPQUFPLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVNLE9BQU8sQ0FBQyxHQUFRO1FBQ3JCLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMxQixLQUFLLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEIsT0FBTyxjQUFjLENBQUM7YUFDdkI7WUFDRCxLQUFLLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEIsT0FBTyxTQUFTLENBQUM7YUFDbEI7WUFDRCxLQUFLLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDNUIsT0FBTyxXQUFXLENBQUM7YUFDcEI7WUFDRCxLQUFLLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEIsT0FBTyxPQUFPLENBQUM7YUFDaEI7WUFDRCxPQUFPLENBQUMsQ0FBQztnQkFDUCxPQUFPLFNBQVMsQ0FBQzthQUNsQjtTQUNGO0lBQ0gsQ0FBQztJQUVNLGFBQWEsQ0FBQyxHQUFRO1FBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFTSxVQUFVLENBQUMsR0FBUTtRQUN4QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0IGFzIGdldEF0dHJpYnV0ZVZhbHVlIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFNUQVRVU19UWVBFLCBTdGF0dXMgfSBmcm9tICcuLi9zdGF0dXMvdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXR1c0NvbmZpZyB7XG4gIGZpZWxkPzogc3RyaW5nO1xuICB2YWx1ZUZuPzogKHJvdzogYW55KSA9PiBTdGF0dXM7XG4gIGZpZWxkUGhhc2U/OiBzdHJpbmc7XG4gIGZpZWxkTWVzc2FnZT86IHN0cmluZztcbiAgZmllbGRTdGF0ZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFN0YXR1c1ZhbHVlIHtcbiAgZmllbGQ6IHN0cmluZztcbiAgZmllbGRQaGFzZTogc3RyaW5nO1xuICB2YWx1ZUZuOiAocm93OiBhbnkpID0+IFN0YXR1cztcbiAgZmllbGRNZXNzYWdlOiBzdHJpbmc7XG4gIGZpZWxkU3RhdGU6IHN0cmluZztcblxuICBwcml2YXRlIGRlZmF1bHRWYWx1ZXM6IFN0YXR1c0NvbmZpZyA9IHtcbiAgICBmaWVsZDogJ3N0YXR1cycsXG4gICAgZmllbGRQaGFzZTogJycsXG4gICAgZmllbGRNZXNzYWdlOiAnJyxcbiAgICBmaWVsZFN0YXRlOiAnJyxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFN0YXR1c0NvbmZpZyA9IHt9KSB7XG4gICAgY29uc3QgeyBmaWVsZCwgdmFsdWVGbiwgZmllbGRQaGFzZSwgZmllbGRNZXNzYWdlLCBmaWVsZFN0YXRlIH0gPSB7XG4gICAgICAuLi50aGlzLmRlZmF1bHRWYWx1ZXMsXG4gICAgICAuLi5jb25maWcsXG4gICAgfTtcbiAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgdGhpcy52YWx1ZUZuID0gdmFsdWVGbjtcbiAgICB0aGlzLmZpZWxkUGhhc2UgPSBmaWVsZFBoYXNlO1xuICAgIHRoaXMuZmllbGRNZXNzYWdlID0gZmllbGRNZXNzYWdlO1xuICAgIHRoaXMuZmllbGRTdGF0ZSA9IGZpZWxkU3RhdGU7XG4gIH1cblxuICBnZXRQaGFzZShyb3c6IGFueSkge1xuICAgIGlmICh0aGlzLnZhbHVlRm4pIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlRm4ocm93KS5waGFzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZmllbGRQaGFzZSkge1xuICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKHJvdywgdGhpcy5maWVsZCArICcucGhhc2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0QXR0cmlidXRlVmFsdWUocm93LCB0aGlzLmZpZWxkUGhhc2UpO1xuICB9XG5cbiAgZ2V0U3RhdGUocm93OiBhbnkpIHtcbiAgICBpZiAodGhpcy52YWx1ZUZuKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZUZuKHJvdykuc3RhdGU7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmZpZWxkUGhhc2UpIHtcbiAgICAgIHJldHVybiBnZXRBdHRyaWJ1dGVWYWx1ZShyb3csIHRoaXMuZmllbGQgKyAnLnN0YXRlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKHJvdywgdGhpcy5maWVsZFN0YXRlKTtcbiAgfVxuXG4gIGdldE1lc3NhZ2Uocm93OiBhbnkpIHtcbiAgICBpZiAodGhpcy52YWx1ZUZuKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZUZuKHJvdykubWVzc2FnZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZmllbGRQaGFzZSkge1xuICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKHJvdywgdGhpcy5maWVsZCArICcubWVzc2FnZScpO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRBdHRyaWJ1dGVWYWx1ZShyb3csIHRoaXMuZmllbGRNZXNzYWdlKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRJY29uKHJvdzogYW55KSB7XG4gICAgc3dpdGNoICh0aGlzLmdldFBoYXNlKHJvdykpIHtcbiAgICAgIGNhc2UgU1RBVFVTX1RZUEUuUkVBRFk6IHtcbiAgICAgICAgcmV0dXJuICdjaGVja19jaXJjbGUnO1xuICAgICAgfVxuICAgICAgY2FzZSBTVEFUVVNfVFlQRS5SRUFEWToge1xuICAgICAgICByZXR1cm4gJ3dhcm5pbmcnO1xuICAgICAgfVxuICAgICAgY2FzZSBTVEFUVVNfVFlQRS5VTkFWQUlMQUJMRToge1xuICAgICAgICByZXR1cm4gJ3RpbWVsYXBzZSc7XG4gICAgICB9XG4gICAgICBjYXNlIFNUQVRVU19UWVBFLkVSUk9SOiB7XG4gICAgICAgIHJldHVybiAnZXJyb3InO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICByZXR1cm4gJ3dhcm5pbmcnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRDc3NDbGFzc2VzKHJvdzogYW55KTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbdGhpcy5nZXRQaGFzZShyb3cpLCAnc3RhdHVzJ107XG4gIH1cblxuICBwdWJsaWMgZ2V0VG9vbHRpcChyb3c6IGFueSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TWVzc2FnZShyb3cpO1xuICB9XG59XG4iXX0=