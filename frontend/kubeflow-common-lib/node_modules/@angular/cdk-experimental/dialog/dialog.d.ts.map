{"version":3,"file":"dialog.d.ts","sources":["dialog.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef, Injector, OnDestroy, Type } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { DialogRef } from './dialog-ref';\nimport { Location } from '@angular/common';\nimport { DialogConfig } from './dialog-config';\nimport { CdkDialogContainer } from './dialog-container';\nimport { ComponentType, Overlay, OverlayRef } from '@angular/cdk/overlay';\n/**\n * Service to open modal dialogs.\n */\nexport declare class Dialog implements OnDestroy {\n    private _overlay;\n    private _injector;\n    private _dialogRefConstructor;\n    private _parentDialog;\n    private _scrollStrategy;\n    /** Stream that emits when all dialogs are closed. */\n    _getAfterAllClosed(): Observable<void>;\n    readonly _afterAllClosedBase: Subject<void>;\n    afterAllClosed: Observable<void>;\n    /** Stream that emits when a dialog is opened. */\n    get afterOpened(): Subject<DialogRef<any>>;\n    readonly _afterOpened: Subject<DialogRef<any, any>>;\n    /** Stream that emits when a dialog is opened. */\n    get openDialogs(): DialogRef<any>[];\n    _openDialogs: DialogRef<any>[];\n    constructor(_overlay: Overlay, _injector: Injector, _dialogRefConstructor: Type<DialogRef<any>>, scrollStrategy: any, _parentDialog: Dialog, location: Location);\n    /** Gets an open dialog by id. */\n    getById(id: string): DialogRef<any> | undefined;\n    /** Closes all open dialogs. */\n    closeAll(): void;\n    /** Opens a dialog from a component. */\n    openFromComponent<T>(component: ComponentType<T>, config?: DialogConfig): DialogRef<any>;\n    /** Opens a dialog from a template. */\n    openFromTemplate<T>(template: TemplateRef<T>, config?: DialogConfig): DialogRef<any>;\n    ngOnDestroy(): void;\n    /**\n     * Forwards emitting events for when dialogs are opened and all dialogs are closed.\n     */\n    private _registerDialogRef;\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    protected _createOverlay(config: DialogConfig): OverlayRef;\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    protected _attachDialogContainer(overlay: OverlayRef, config: DialogConfig): CdkDialogContainer;\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    protected _attachDialogContentForComponent<T>(componentOrTemplateRef: ComponentType<T>, dialogContainer: CdkDialogContainer, overlayRef: OverlayRef, config: DialogConfig): DialogRef<any>;\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    protected _attachDialogContentForTemplate<T>(componentOrTemplateRef: TemplateRef<T>, dialogContainer: CdkDialogContainer, overlayRef: OverlayRef, config: DialogConfig): DialogRef<any>;\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param container Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    private _createInjector;\n    /** Creates a new dialog ref. */\n    private _createDialogRef;\n    /**\n     * Expands the provided configuration object to include the default values for properties which\n     * are undefined.\n     */\n    private _applyConfigDefaults;\n}\n"]}