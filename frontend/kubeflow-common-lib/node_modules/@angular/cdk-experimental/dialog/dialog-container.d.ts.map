{"version":3,"file":"dialog-container.d.ts","sources":["dialog-container.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, DomPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DialogConfig } from './dialog-config';\nexport declare function throwDialogContentAlreadyAttachedError(): void;\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nexport declare class CdkDialogContainer extends BasePortalOutlet implements OnDestroy {\n    private _elementRef;\n    private _focusTrapFactory;\n    private _changeDetectorRef;\n    /** The dialog configuration. */\n    _config: DialogConfig;\n    private readonly _document;\n    /** State of the dialog animation. */\n    _state: 'void' | 'enter' | 'exit';\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n    private _elementFocusedBeforeDialogWasOpened;\n    /** The class that traps and manages focus within the dialog. */\n    private _focusTrap;\n    get _ariaLabel(): string | null;\n    get _ariaDescribedBy(): string | null | undefined;\n    get _role(): import(\"@angular/cdk-experimental/dialog/dialog-config\").DialogRole | undefined;\n    _ariaModal: boolean;\n    get _tabindex(): number;\n    /** The portal host inside of this container into which the dialog content will be loaded. */\n    _portalHost: CdkPortalOutlet;\n    /** A subject emitting before the dialog enters the view. */\n    readonly _beforeEnter: Subject<void>;\n    /** A subject emitting after the dialog enters the view. */\n    readonly _afterEnter: Subject<void>;\n    /** A subject emitting before the dialog exits the view. */\n    readonly _beforeExit: Subject<void>;\n    /** A subject emitting after the dialog exits the view. */\n    readonly _afterExit: Subject<void>;\n    /** Stream of animation `done` events. */\n    readonly _animationDone: Subject<AnimationEvent>;\n    constructor(_elementRef: ElementRef<HTMLElement>, _focusTrapFactory: FocusTrapFactory, _changeDetectorRef: ChangeDetectorRef, _document: any, \n    /** The dialog configuration. */\n    _config: DialogConfig);\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent(): void;\n    /** Destroy focus trap to place focus back to the element focused before the dialog opened. */\n    ngOnDestroy(): void;\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    attachDomPortal: (portal: DomPortal) => void;\n    /** Emit lifecycle events based on animation `start` callback. */\n    _onAnimationStart(event: AnimationEvent): void;\n    /** Starts the dialog exit animation. */\n    _startExiting(): void;\n    /** Saves a reference to the element that was focused before the dialog was opened. */\n    private _savePreviouslyFocusedElement;\n    /** Focuses the dialog container. */\n    private _focusDialogContainer;\n    /**\n     * Autofocus the first tabbable element inside of the dialog, if there is not a tabbable element,\n     * focus the dialog instead.\n     */\n    private _autoFocusFirstTabbableElement;\n    /** Returns the focus to the element focused before the dialog was open. */\n    private _returnFocusAfterDialog;\n}\n"]}