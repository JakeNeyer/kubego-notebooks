/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, NgZone } from '@angular/core';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { Overlay } from '@angular/cdk/overlay';
import { ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';
import { EditEventDispatcher } from './edit-event-dispatcher';
import { FocusDispatcher } from './focus-dispatcher';
import { PopoverEditPositionStrategyFactory } from './popover-edit-position-strategy-factory';
/**
 * Optimization
 * Collects multiple Injectables into a singleton shared across the table. By reducing the
 * number of services injected into each CdkPopoverEdit, this saves about 0.023ms of cpu time
 * and 56 bytes of memory per instance.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/bidi';
import * as ɵngcc2 from './edit-event-dispatcher';
import * as ɵngcc3 from './focus-dispatcher';
import * as ɵngcc4 from '@angular/cdk/a11y';
import * as ɵngcc5 from '@angular/cdk/overlay';
import * as ɵngcc6 from './popover-edit-position-strategy-factory';
import * as ɵngcc7 from '@angular/cdk/scrolling';
export class EditServices {
    constructor(directionality, editEventDispatcher, focusDispatcher, focusTrapFactory, ngZone, overlay, positionFactory, scrollDispatcher, viewportRuler) {
        this.directionality = directionality;
        this.editEventDispatcher = editEventDispatcher;
        this.focusDispatcher = focusDispatcher;
        this.focusTrapFactory = focusTrapFactory;
        this.ngZone = ngZone;
        this.overlay = overlay;
        this.positionFactory = positionFactory;
        this.scrollDispatcher = scrollDispatcher;
        this.viewportRuler = viewportRuler;
    }
}
EditServices.ɵfac = function EditServices_Factory(t) { return new (t || EditServices)(ɵngcc0.ɵɵinject(ɵngcc1.Directionality), ɵngcc0.ɵɵinject(ɵngcc2.EditEventDispatcher), ɵngcc0.ɵɵinject(ɵngcc3.FocusDispatcher), ɵngcc0.ɵɵinject(ɵngcc4.FocusTrapFactory), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.PopoverEditPositionStrategyFactory), ɵngcc0.ɵɵinject(ɵngcc7.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc7.ViewportRuler)); };
EditServices.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: EditServices, factory: EditServices.ɵfac });
EditServices.ctorParameters = () => [
    { type: Directionality },
    { type: EditEventDispatcher },
    { type: FocusDispatcher },
    { type: FocusTrapFactory },
    { type: NgZone },
    { type: Overlay },
    { type: PopoverEditPositionStrategyFactory },
    { type: ScrollDispatcher },
    { type: ViewportRuler }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EditServices, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Directionality }, { type: ɵngcc2.EditEventDispatcher }, { type: ɵngcc3.FocusDispatcher }, { type: ɵngcc4.FocusTrapFactory }, { type: ɵngcc0.NgZone }, { type: ɵngcc5.Overlay }, { type: ɵngcc6.PopoverEditPositionStrategyFactory }, { type: ɵngcc7.ScrollDispatcher }, { type: ɵngcc7.ViewportRuler }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC1zZXJ2aWNlcy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2Nkay1leHBlcmltZW50YWwvcG9wb3Zlci1lZGl0L2VkaXQtc2VydmljZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDN0MsT0FBTyxFQUFDLGdCQUFnQixFQUFFLGFBQWEsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBRXZFLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUMsa0NBQWtDLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQztBQUc1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7Ozs7Ozs7O0FBRUgsTUFBTSxPQUFPLFlBQVk7QUFDekIsSUFBRSxZQUNhLGNBQThCLEVBQzlCLG1CQUEwRCxFQUMxRCxlQUFnQyxFQUNoQyxnQkFBa0MsRUFBVyxNQUFjLEVBQzNELE9BQWdCLEVBQVcsZUFBbUQsRUFDOUUsZ0JBQWtDLEVBQVcsYUFBNEI7QUFBSSxRQUw3RSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7QUFBQyxRQUMvQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXVDO0FBQUMsUUFDM0Qsb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQUMsUUFDakMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBQzVELFlBQU8sR0FBUCxPQUFPLENBQVM7QUFBQyxRQUFVLG9CQUFlLEdBQWYsZUFBZSxDQUFvQztBQUFDLFFBQy9FLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQUMsSUFBRSxDQUFDO0FBQzVGO3dDQVRDLFVBQVU7a0hBQ1Q7QUFBQztBQUNVLFlBakJMLGNBQWM7QUFBSSxZQUlsQixtQkFBbUI7QUFBSSxZQUN2QixlQUFlO0FBQUksWUFObkIsZ0JBQWdCO0FBQUksWUFEUixNQUFNO0FBQUksWUFHdEIsT0FBTztBQUFJLFlBS1gsa0NBQWtDO0FBQUksWUFKdEMsZ0JBQWdCO0FBQUksWUFBRixhQUFhO0FBQUc7OztxV0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SW5qZWN0YWJsZSwgTmdab25lfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Rm9jdXNUcmFwRmFjdG9yeX0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHtEaXJlY3Rpb25hbGl0eX0gZnJvbSAnQGFuZ3VsYXIvY2RrL2JpZGknO1xuaW1wb3J0IHtPdmVybGF5fSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQge1Njcm9sbERpc3BhdGNoZXIsIFZpZXdwb3J0UnVsZXJ9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zY3JvbGxpbmcnO1xuXG5pbXBvcnQge0VkaXRFdmVudERpc3BhdGNoZXJ9IGZyb20gJy4vZWRpdC1ldmVudC1kaXNwYXRjaGVyJztcbmltcG9ydCB7Rm9jdXNEaXNwYXRjaGVyfSBmcm9tICcuL2ZvY3VzLWRpc3BhdGNoZXInO1xuaW1wb3J0IHtQb3BvdmVyRWRpdFBvc2l0aW9uU3RyYXRlZ3lGYWN0b3J5fSBmcm9tICcuL3BvcG92ZXItZWRpdC1wb3NpdGlvbi1zdHJhdGVneS1mYWN0b3J5JztcbmltcG9ydCB7RWRpdFJlZn0gZnJvbSAnLi9lZGl0LXJlZic7XG5cbi8qKlxuICogT3B0aW1pemF0aW9uXG4gKiBDb2xsZWN0cyBtdWx0aXBsZSBJbmplY3RhYmxlcyBpbnRvIGEgc2luZ2xldG9uIHNoYXJlZCBhY3Jvc3MgdGhlIHRhYmxlLiBCeSByZWR1Y2luZyB0aGVcbiAqIG51bWJlciBvZiBzZXJ2aWNlcyBpbmplY3RlZCBpbnRvIGVhY2ggQ2RrUG9wb3ZlckVkaXQsIHRoaXMgc2F2ZXMgYWJvdXQgMC4wMjNtcyBvZiBjcHUgdGltZVxuICogYW5kIDU2IGJ5dGVzIG9mIG1lbW9yeSBwZXIgaW5zdGFuY2UuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFZGl0U2VydmljZXMge1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHJlYWRvbmx5IGRpcmVjdGlvbmFsaXR5OiBEaXJlY3Rpb25hbGl0eSxcbiAgICAgIHJlYWRvbmx5IGVkaXRFdmVudERpc3BhdGNoZXI6IEVkaXRFdmVudERpc3BhdGNoZXI8RWRpdFJlZjx1bmtub3duPj4sXG4gICAgICByZWFkb25seSBmb2N1c0Rpc3BhdGNoZXI6IEZvY3VzRGlzcGF0Y2hlcixcbiAgICAgIHJlYWRvbmx5IGZvY3VzVHJhcEZhY3Rvcnk6IEZvY3VzVHJhcEZhY3RvcnksIHJlYWRvbmx5IG5nWm9uZTogTmdab25lLFxuICAgICAgcmVhZG9ubHkgb3ZlcmxheTogT3ZlcmxheSwgcmVhZG9ubHkgcG9zaXRpb25GYWN0b3J5OiBQb3BvdmVyRWRpdFBvc2l0aW9uU3RyYXRlZ3lGYWN0b3J5LFxuICAgICAgcmVhZG9ubHkgc2Nyb2xsRGlzcGF0Y2hlcjogU2Nyb2xsRGlzcGF0Y2hlciwgcmVhZG9ubHkgdmlld3BvcnRSdWxlcjogVmlld3BvcnRSdWxlcikge31cbn1cbiJdfQ==