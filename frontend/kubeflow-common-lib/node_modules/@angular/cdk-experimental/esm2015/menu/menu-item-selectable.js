/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Input, Directive, Output, EventEmitter } from '@angular/core';
import { CdkMenuItem } from './menu-item';
/** Counter used to set a unique id and name for a selectable item */
import * as ɵngcc0 from '@angular/core';
let nextId = 0;
/**
 * Base class providing checked state for MenuItems along with outputting a clicked event when the
 * element is triggered. It provides functionality for selectable elements.
 */
export class CdkMenuItemSelectable extends CdkMenuItem {
    constructor() {
        super(...arguments);
        /** Event emitted when the selectable item is clicked */
        this.toggled = new EventEmitter();
        this._checked = false;
        /** The name of the selectable element with a default value */
        this.name = `cdk-selectable-item-${nextId++}`;
        /** The id of the selectable element with a default value */
        this.id = `cdk-selectable-item-${nextId++}`;
    }
    /** Whether the element is checked */
    get checked() {
        return this._checked;
    }
    set checked(value) {
        this._checked = coerceBooleanProperty(value);
    }
    /** If the element is not disabled emit the click event */
    trigger() {
        if (!this.disabled) {
            this.toggled.next(this);
        }
    }
}
CdkMenuItemSelectable.ɵfac = /*@__PURE__*/ function () { let ɵCdkMenuItemSelectable_BaseFactory; return function CdkMenuItemSelectable_Factory(t) { return (ɵCdkMenuItemSelectable_BaseFactory || (ɵCdkMenuItemSelectable_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CdkMenuItemSelectable)))(t || CdkMenuItemSelectable); }; }();
CdkMenuItemSelectable.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkMenuItemSelectable, inputs: { name: "name", id: "id", checked: "checked" }, outputs: { toggled: "cdkMenuItemToggled" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
CdkMenuItemSelectable.propDecorators = {
    toggled: [{ type: Output, args: ['cdkMenuItemToggled',] }],
    checked: [{ type: Input }],
    name: [{ type: Input }],
    id: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMenuItemSelectable, [{
        type: Directive
    }], null, { toggled: [{
            type: Output,
            args: ['cdkMenuItemToggled']
        }], name: [{
            type: Input
        }], id: [{
            type: Input
        }], checked: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1pdGVtLXNlbGVjdGFibGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jZGstZXhwZXJpbWVudGFsL21lbnUvbWVudS1pdGVtLXNlbGVjdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBQyxxQkFBcUIsRUFBZSxNQUFNLHVCQUF1QixDQUFDO0FBQzFFLE9BQU8sRUFBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUV4QyxxRUFBcUU7O0FBQ3JFLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztBQUVmO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxNQUFNLE9BQWdCLHFCQUFzQixTQUFRLFdBQVc7QUFDL0QsSUFGQTtBQUNHO0FBQTZCLFFBQzlCLHdEQUF3RDtBQUMxRCxRQUF5QyxZQUFPLEdBQzFDLElBQUksWUFBWSxFQUFFLENBQUM7QUFDekIsUUFTVSxhQUFRLEdBQUcsS0FBSyxDQUFDO0FBQzNCLFFBQ0UsOERBQThEO0FBQ2hFLFFBQVcsU0FBSSxHQUFXLHVCQUF1QixNQUFNLEVBQUUsRUFBRSxDQUFDO0FBQzVELFFBQ0UsNERBQTREO0FBQzlELFFBQVcsT0FBRSxHQUFXLHVCQUF1QixNQUFNLEVBQUUsRUFBRSxDQUFDO0FBQzFELElBU0EsQ0FBQztBQUNELElBekJFLHFDQUFxQztBQUN2QyxJQUFFLElBQ0ksT0FBTztBQUNiLFFBQUksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3pCLElBQUUsQ0FBQztBQUNILElBQUUsSUFBSSxPQUFPLENBQUMsS0FBYztBQUM1QixRQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakQsSUFBRSxDQUFDO0FBQ0gsSUFRRSwwREFBMEQ7QUFDNUQsSUFBRSxPQUFPO0FBQ1QsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUN4QixZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDtpREE1QkMsU0FBUzt3UEFDUjtBQUFDO0FBQXlDLHNCQUV6QyxNQUFNLFNBQUMsb0JBQW9CO0FBQU8sc0JBSWxDLEtBQUs7QUFDTixtQkFTQyxLQUFLO0FBQUssaUJBR1YsS0FBSztBQUFJOzs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge2NvZXJjZUJvb2xlYW5Qcm9wZXJ0eSwgQm9vbGVhbklucHV0fSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHtJbnB1dCwgRGlyZWN0aXZlLCBPdXRwdXQsIEV2ZW50RW1pdHRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Nka01lbnVJdGVtfSBmcm9tICcuL21lbnUtaXRlbSc7XG5cbi8qKiBDb3VudGVyIHVzZWQgdG8gc2V0IGEgdW5pcXVlIGlkIGFuZCBuYW1lIGZvciBhIHNlbGVjdGFibGUgaXRlbSAqL1xubGV0IG5leHRJZCA9IDA7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBwcm92aWRpbmcgY2hlY2tlZCBzdGF0ZSBmb3IgTWVudUl0ZW1zIGFsb25nIHdpdGggb3V0cHV0dGluZyBhIGNsaWNrZWQgZXZlbnQgd2hlbiB0aGVcbiAqIGVsZW1lbnQgaXMgdHJpZ2dlcmVkLiBJdCBwcm92aWRlcyBmdW5jdGlvbmFsaXR5IGZvciBzZWxlY3RhYmxlIGVsZW1lbnRzLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDZGtNZW51SXRlbVNlbGVjdGFibGUgZXh0ZW5kcyBDZGtNZW51SXRlbSB7XG4gIC8qKiBFdmVudCBlbWl0dGVkIHdoZW4gdGhlIHNlbGVjdGFibGUgaXRlbSBpcyBjbGlja2VkICovXG4gIEBPdXRwdXQoJ2Nka01lbnVJdGVtVG9nZ2xlZCcpIHJlYWRvbmx5IHRvZ2dsZWQ6IEV2ZW50RW1pdHRlcjxDZGtNZW51SXRlbVNlbGVjdGFibGU+ID1cbiAgICAgIG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvKiogV2hldGhlciB0aGUgZWxlbWVudCBpcyBjaGVja2VkICovXG4gIEBJbnB1dCgpXG4gIGdldCBjaGVja2VkKCkge1xuICAgIHJldHVybiB0aGlzLl9jaGVja2VkO1xuICB9XG4gIHNldCBjaGVja2VkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fY2hlY2tlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gIH1cbiAgcHJpdmF0ZSBfY2hlY2tlZCA9IGZhbHNlO1xuXG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgc2VsZWN0YWJsZSBlbGVtZW50IHdpdGggYSBkZWZhdWx0IHZhbHVlICovXG4gIEBJbnB1dCgpIG5hbWU6IHN0cmluZyA9IGBjZGstc2VsZWN0YWJsZS1pdGVtLSR7bmV4dElkKyt9YDtcblxuICAvKiogVGhlIGlkIG9mIHRoZSBzZWxlY3RhYmxlIGVsZW1lbnQgd2l0aCBhIGRlZmF1bHQgdmFsdWUgKi9cbiAgQElucHV0KCkgaWQ6IHN0cmluZyA9IGBjZGstc2VsZWN0YWJsZS1pdGVtLSR7bmV4dElkKyt9YDtcblxuICAvKiogSWYgdGhlIGVsZW1lbnQgaXMgbm90IGRpc2FibGVkIGVtaXQgdGhlIGNsaWNrIGV2ZW50ICovXG4gIHRyaWdnZXIoKSB7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnRvZ2dsZWQubmV4dCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfY2hlY2tlZDogQm9vbGVhbklucHV0O1xufVxuIl19