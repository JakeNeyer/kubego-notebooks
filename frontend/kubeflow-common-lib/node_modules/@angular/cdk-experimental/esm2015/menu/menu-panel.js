/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directive, TemplateRef } from '@angular/core';
/**
 * Directive applied to an ng-template which wraps a CdkMenu and provides a reference to the
 * child element it wraps which allows for opening of the CdkMenu in an overlay.
 */
import * as ɵngcc0 from '@angular/core';
export class CdkMenuPanel {
    constructor(_templateRef) {
        this._templateRef = _templateRef;
    }
    /**
     * Set the Menu component on the menu panel. Since we cannot use ContentChild to fetch the
     * child Menu component, the child Menu must register its self with the parent MenuPanel.
     */
    _registerMenu(child) {
        var _a;
        this._menu = child;
        // The ideal solution would be to affect the CdkMenuPanel injector from the CdkMenuTrigger and
        // inject the menu stack reference into the child menu and menu items, however this isn't
        // possible at this time.
        this._menu._menuStack = this._menuStack;
        (_a = this._menuStack) === null || _a === void 0 ? void 0 : _a.push(child);
    }
}
CdkMenuPanel.ɵfac = function CdkMenuPanel_Factory(t) { return new (t || CdkMenuPanel)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
CdkMenuPanel.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkMenuPanel, selectors: [["ng-template", "cdkMenuPanel", ""]], exportAs: ["cdkMenuPanel"] });
CdkMenuPanel.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMenuPanel, [{
        type: Directive,
        args: [{ selector: 'ng-template[cdkMenuPanel]', exportAs: 'cdkMenuPanel' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1wYW5lbC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2Nkay1leHBlcmltZW50YWwvbWVudS9tZW51LXBhbmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUMsU0FBUyxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUlyRDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILE1BQU0sT0FBTyxZQUFZO0FBQ3pCLElBTUUsWUFBcUIsWUFBa0M7QUFBSSxRQUF0QyxpQkFBWSxHQUFaLFlBQVksQ0FBc0I7QUFBQyxJQUFFLENBQUM7QUFDN0QsSUFDRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBRSxhQUFhLENBQUMsS0FBVztBQUMzQjtBQUFnQixRQUFaLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLFFBQ0ksOEZBQThGO0FBQ2xHLFFBQUkseUZBQXlGO0FBQzdGLFFBQUkseUJBQXlCO0FBQzdCLFFBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUM1QyxRQUFJLE1BQUEsSUFBSSxDQUFDLFVBQVUsMENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pDLElBQUUsQ0FBQztBQUNIO3dDQXZCQyxTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBQztpS0FDdkU7QUFBQztBQUNVLFlBVkcsV0FBVztBQUFHOzs7OzRFQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtEaXJlY3RpdmUsIFRlbXBsYXRlUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TWVudX0gZnJvbSAnLi9tZW51LWludGVyZmFjZSc7XG5pbXBvcnQge01lbnVTdGFja30gZnJvbSAnLi9tZW51LXN0YWNrJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgYXBwbGllZCB0byBhbiBuZy10ZW1wbGF0ZSB3aGljaCB3cmFwcyBhIENka01lbnUgYW5kIHByb3ZpZGVzIGEgcmVmZXJlbmNlIHRvIHRoZVxuICogY2hpbGQgZWxlbWVudCBpdCB3cmFwcyB3aGljaCBhbGxvd3MgZm9yIG9wZW5pbmcgb2YgdGhlIENka01lbnUgaW4gYW4gb3ZlcmxheS5cbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICduZy10ZW1wbGF0ZVtjZGtNZW51UGFuZWxdJywgZXhwb3J0QXM6ICdjZGtNZW51UGFuZWwnfSlcbmV4cG9ydCBjbGFzcyBDZGtNZW51UGFuZWwge1xuICAvKiogUmVmZXJlbmNlIHRvIHRoZSBjaGlsZCBtZW51IGNvbXBvbmVudCAqL1xuICBfbWVudT86IE1lbnU7XG5cbiAgLyoqIEtlZXAgdHJhY2sgb2Ygb3BlbiBNZW51cy4gKi9cbiAgX21lbnVTdGFjazogTWVudVN0YWNrIHwgbnVsbDtcblxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBfdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPHVua25vd24+KSB7fVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIE1lbnUgY29tcG9uZW50IG9uIHRoZSBtZW51IHBhbmVsLiBTaW5jZSB3ZSBjYW5ub3QgdXNlIENvbnRlbnRDaGlsZCB0byBmZXRjaCB0aGVcbiAgICogY2hpbGQgTWVudSBjb21wb25lbnQsIHRoZSBjaGlsZCBNZW51IG11c3QgcmVnaXN0ZXIgaXRzIHNlbGYgd2l0aCB0aGUgcGFyZW50IE1lbnVQYW5lbC5cbiAgICovXG4gIF9yZWdpc3Rlck1lbnUoY2hpbGQ6IE1lbnUpIHtcbiAgICB0aGlzLl9tZW51ID0gY2hpbGQ7XG5cbiAgICAvLyBUaGUgaWRlYWwgc29sdXRpb24gd291bGQgYmUgdG8gYWZmZWN0IHRoZSBDZGtNZW51UGFuZWwgaW5qZWN0b3IgZnJvbSB0aGUgQ2RrTWVudVRyaWdnZXIgYW5kXG4gICAgLy8gaW5qZWN0IHRoZSBtZW51IHN0YWNrIHJlZmVyZW5jZSBpbnRvIHRoZSBjaGlsZCBtZW51IGFuZCBtZW51IGl0ZW1zLCBob3dldmVyIHRoaXMgaXNuJ3RcbiAgICAvLyBwb3NzaWJsZSBhdCB0aGlzIHRpbWUuXG4gICAgdGhpcy5fbWVudS5fbWVudVN0YWNrID0gdGhpcy5fbWVudVN0YWNrO1xuICAgIHRoaXMuX21lbnVTdGFjaz8ucHVzaChjaGlsZCk7XG4gIH1cbn1cbiJdfQ==