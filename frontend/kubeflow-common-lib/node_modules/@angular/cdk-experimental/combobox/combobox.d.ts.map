{"version":3,"file":"combobox.d.ts","sources":["combobox.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare type OpenAction = 'focus' | 'click' | 'downKey' | 'toggle';\nexport declare type OpenActionInput = OpenAction | OpenAction[] | string | null | undefined;\nimport { AfterContentInit, ElementRef, EventEmitter, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { CdkComboboxPanel, AriaHasPopupValue } from './combobox-panel';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { BooleanInput } from '@angular/cdk/coercion';\nexport declare class CdkCombobox<T = unknown> implements OnDestroy, AfterContentInit {\n    private readonly _elementRef;\n    private readonly _overlay;\n    protected readonly _viewContainerRef: ViewContainerRef;\n    private readonly _directionality?;\n    get panel(): CdkComboboxPanel<T> | undefined;\n    set panel(panel: CdkComboboxPanel<T> | undefined);\n    private _panel;\n    value: T | T[];\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _disabled;\n    get openActions(): OpenAction[];\n    set openActions(action: OpenAction[]);\n    private _openActions;\n    /** Whether the textContent is automatically updated upon change of the combobox value. */\n    get autoSetText(): boolean;\n    set autoSetText(value: boolean);\n    private _autoSetText;\n    readonly opened: EventEmitter<void>;\n    readonly closed: EventEmitter<void>;\n    readonly panelValueChanged: EventEmitter<T[]>;\n    private _overlayRef;\n    private _panelContent;\n    contentId: string;\n    contentType: AriaHasPopupValue;\n    constructor(_elementRef: ElementRef<HTMLElement>, _overlay: Overlay, _viewContainerRef: ViewContainerRef, _directionality?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    _keydown(event: KeyboardEvent): void;\n    /** Handles click or focus interactions. */\n    _handleInteractions(interaction: OpenAction): void;\n    /** Given a click in the document, determines if the click was inside a combobox. */\n    _attemptClose(event: MouseEvent): void;\n    /** Toggles the open state of the panel. */\n    toggle(): void;\n    /** If the combobox is closed and not disabled, opens the panel. */\n    open(): void;\n    /** If the combobox is open and not disabled, closes the panel. */\n    close(): void;\n    /** Returns true if panel is currently opened. */\n    isOpen(): boolean;\n    /** Returns true if combobox has a child panel. */\n    hasPanel(): boolean;\n    _getTabIndex(): string | null;\n    private _setComboboxValue;\n    private _setTextContent;\n    private _isTextTrigger;\n    private _getOverlayConfig;\n    private _getOverlayPositionStrategy;\n    private _getOverlayPositions;\n    private _getPanelContent;\n    private _coerceOpenActionProperty;\n    static ngAcceptInputType_openActions: OpenActionInput;\n    static ngAcceptInputType_autoSetText: OpenActionInput;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\n"]}