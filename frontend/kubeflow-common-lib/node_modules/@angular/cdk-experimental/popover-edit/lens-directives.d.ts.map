{"version":3,"file":"lens-directives.d.ts","sources":["lens-directives.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { EditRef } from './edit-ref';\n/** Options for what do to when the user clicks outside of an edit lens. */\nexport declare type PopoverEditClickOutBehavior = 'close' | 'submit' | 'noop';\n/**\n * A directive that attaches to a form within the edit lens.\n * It coordinates the form state with the table-wide edit system and handles\n * closing the edit lens when the form is submitted or the user clicks\n * out.\n */\nexport declare class CdkEditControl<FormValue> implements OnDestroy, OnInit {\n    protected readonly elementRef: ElementRef;\n    readonly editRef: EditRef<FormValue>;\n    protected readonly destroyed: Subject<void>;\n    /**\n     * Specifies what should happen when the user clicks outside of the edit lens.\n     * The default behavior is to close the lens without submitting the form.\n     */\n    clickOutBehavior: PopoverEditClickOutBehavior;\n    /**\n     * A two-way binding for storing unsubmitted form state. If not provided\n     * then form state will be discarded on close. The PeristBy directive is offered\n     * as a convenient shortcut for these bindings.\n     */\n    preservedFormValue?: FormValue;\n    readonly preservedFormValueChange: EventEmitter<FormValue>;\n    /**\n     * Determines whether the lens will close on form submit if the form is not in a valid\n     * state. By default the lens will remain open.\n     */\n    ignoreSubmitUnlessValid: boolean;\n    constructor(elementRef: ElementRef, editRef: EditRef<FormValue>);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Called when the form submits. If ignoreSubmitUnlessValid is true, checks\n     * the form for validity before proceeding.\n     * Updates the revert state with the latest submitted value then closes the edit.\n     */\n    handleFormSubmit(): void;\n    /** Called on Escape keyup. Closes the edit. */\n    close(): void;\n    /**\n     * Called on click anywhere in the document.\n     * If the click was outside of the lens, trigger the specified click out behavior.\n     */\n    handlePossibleClickOut(evt: Event): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    /** Triggers submit on tab out if clickOutBehavior is 'submit'. */\n    private _handleBlur;\n    private _triggerFormSubmit;\n}\n/** Reverts the form to its initial or previously submitted state on click. */\nexport declare class CdkEditRevert<FormValue> {\n    protected readonly editRef: EditRef<FormValue>;\n    /** Type of the button. Defaults to `button` to avoid accident form submits. */\n    type: string;\n    constructor(editRef: EditRef<FormValue>);\n    revertEdit(): void;\n}\n/** Closes the lens on click. */\nexport declare class CdkEditClose<FormValue> {\n    protected readonly elementRef: ElementRef<HTMLElement>;\n    protected readonly editRef: EditRef<FormValue>;\n    constructor(elementRef: ElementRef<HTMLElement>, editRef: EditRef<FormValue>);\n    closeEdit(): void;\n}\n"]}