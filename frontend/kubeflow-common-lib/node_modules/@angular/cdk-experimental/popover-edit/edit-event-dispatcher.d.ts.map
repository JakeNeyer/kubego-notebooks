{"version":3,"file":"edit-event-dispatcher.d.ts","sources":["edit-event-dispatcher.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n/**\n * The possible states for hover content:\n * OFF - Not rendered.\n * FOCUSABLE - Rendered in the dom and styled for its contents to be focusable but invisible.\n * ON - Rendered and fully visible.\n */\nexport declare const enum HoverContentState {\n    OFF = 0,\n    FOCUSABLE = 1,\n    ON = 2\n}\n/**\n * Service for sharing delegated events and state for triggering table edits.\n */\nexport declare class EditEventDispatcher<R> {\n    private readonly _ngZone;\n    /** A subject that indicates which table cell is currently editing (unless it is disabled). */\n    readonly editing: Subject<Element | null>;\n    /** A subject that indicates which table row is currently hovered. */\n    readonly hovering: Subject<Element | null>;\n    /** A subject that indicates which table row currently contains focus. */\n    readonly focused: Subject<Element | null>;\n    /** A subject that indicates all elements in the table matching ROW_SELECTOR. */\n    readonly allRows: Subject<NodeList>;\n    /** A subject that emits mouse move events from the table indicating the targeted row. */\n    readonly mouseMove: Subject<Element | null>;\n    /**\n     * Tracks the currently disabled editable cells - edit calls will be ignored\n     * for these cells.\n     */\n    readonly disabledCells: WeakMap<Element, boolean>;\n    /** The EditRef for the currently active edit lens (if any). */\n    get editRef(): R | null;\n    private _editRef;\n    private readonly _distinctUntilChanged;\n    private readonly _startWithNull;\n    private readonly _distinctShare;\n    private readonly _startWithNullDistinct;\n    readonly editingAndEnabled: Observable<Element | null>;\n    /** An observable that emits the row containing focus or an active edit. */\n    readonly editingOrFocused: Observable<Element | null>;\n    /** Tracks rows that contain hover content with a reference count. */\n    private _rowsWithHoverContent;\n    /** The table cell that has an active edit lens (or null). */\n    private _currentlyEditing;\n    /** The combined set of row hover content states organized by row. */\n    private readonly _hoveredContentStateDistinct;\n    private readonly _editingAndEnabledDistinct;\n    private _lastSeenRow;\n    private _lastSeenRowHoverOrFocus;\n    constructor(_ngZone: NgZone);\n    /**\n     * Gets an Observable that emits true when the specified element's cell\n     * is editing and false when not.\n     */\n    editingCell(element: Element | EventTarget): Observable<boolean>;\n    /**\n     * Stops editing for the specified cell. If the specified cell is not the current\n     * edit cell, does nothing.\n     */\n    doneEditingCell(element: Element | EventTarget): void;\n    /** Sets the currently active EditRef. */\n    setActiveEditRef(ref: R): void;\n    /** Unsets the currently active EditRef, if the specified editRef is active. */\n    unsetActiveEditRef(ref: R): void;\n    /** Adds the specified table row to be tracked for first/last row comparisons. */\n    registerRowWithHoverContent(row: Element): void;\n    /**\n     * Reference decrements and ultimately removes the specified table row from first/last row\n     * comparisons.\n     */\n    deregisterRowWithHoverContent(row: Element): void;\n    /**\n     * Gets an Observable that emits true when the specified element's row\n     * contains the focused element or is being hovered over and false when not.\n     * Hovering is defined as when the mouse has momentarily stopped moving over the cell.\n     */\n    hoverOrFocusOnRow(row: Element): Observable<HoverContentState>;\n    /**\n     * RxJS operator that enters the Angular zone, used to reduce boilerplate in\n     * re-entering the zone for stream pipelines.\n     */\n    private _enterZone;\n    private _getFirstRowWithHoverContent;\n    private _getLastRowWithHoverContent;\n    private _mapAllRowsToSingleRow;\n}\n"]}