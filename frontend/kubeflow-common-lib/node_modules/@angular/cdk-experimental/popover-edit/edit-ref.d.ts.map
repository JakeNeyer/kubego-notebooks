{"version":3,"file":"edit-ref.d.ts","sources":["edit-ref.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy, NgZone } from '@angular/core';\nimport { ControlContainer } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { EditEventDispatcher } from './edit-event-dispatcher';\n/**\n * Used for communication between the form within the edit lens and the\n * table that launched it. Provided by CdkEditControl within the lens.\n */\nexport declare class EditRef<FormValue> implements OnDestroy {\n    private readonly _form;\n    private readonly _editEventDispatcher;\n    private readonly _ngZone;\n    /** Emits the final value of this edit instance before closing. */\n    private readonly _finalValueSubject;\n    readonly finalValue: Observable<FormValue>;\n    /** Emits when the user tabs out of this edit lens before closing. */\n    private readonly _blurredSubject;\n    readonly blurred: Observable<void>;\n    /** The value to set the form back to on revert. */\n    private _revertFormValue;\n    constructor(_form: ControlContainer, _editEventDispatcher: EditEventDispatcher<EditRef<FormValue>>, _ngZone: NgZone);\n    /**\n     * Called by the host directive's OnInit hook. Reads the initial state of the\n     * form and overrides it with persisted state from previous openings, if\n     * applicable.\n     */\n    init(previousFormValue: FormValue | undefined): void;\n    ngOnDestroy(): void;\n    /** Whether the attached form is in a valid state. */\n    isValid(): boolean | null;\n    /** Set the form's current value as what it will be set to on revert/reset. */\n    updateRevertValue(): void;\n    /** Tells the table to close the edit popup. */\n    close(): void;\n    /** Notifies the active edit that the user has moved focus out of the lens. */\n    blur(): void;\n    /**\n     * Resets the form value to the specified value or the previously set\n     * revert value.\n     */\n    reset(value?: FormValue): void;\n}\n"]}