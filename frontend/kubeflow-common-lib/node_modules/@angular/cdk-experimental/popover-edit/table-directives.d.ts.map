{"version":3,"file":"table-directives.d.ts","sources":["table-directives.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusTrap } from '@angular/cdk/a11y';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { AfterViewInit, ElementRef, EmbeddedViewRef, NgZone, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { EditEventDispatcher } from './edit-event-dispatcher';\nimport { EditServices } from './edit-services';\nimport { FocusDispatcher } from './focus-dispatcher';\nimport { FocusEscapeNotifier, FocusEscapeNotifierFactory } from './focus-escape-notifier';\nimport { EditRef } from './edit-ref';\n/**\n * Describes the number of columns before and after the originating cell that the\n * edit popup should span. In left to right locales, before means left and after means\n * right. In right to left locales before means right and after means left.\n */\nexport interface CdkPopoverEditColspan {\n    before?: number;\n    after?: number;\n}\n/**\n * A directive that must be attached to enable editability on a table.\n * It is responsible for setting up delegated event handlers and providing the\n * EditEventDispatcher service for use by the other edit directives.\n */\nexport declare class CdkEditable implements AfterViewInit, OnDestroy {\n    protected readonly elementRef: ElementRef;\n    protected readonly editEventDispatcher: EditEventDispatcher<EditRef<unknown>>;\n    protected readonly focusDispatcher: FocusDispatcher;\n    protected readonly ngZone: NgZone;\n    protected readonly destroyed: Subject<void>;\n    constructor(elementRef: ElementRef, editEventDispatcher: EditEventDispatcher<EditRef<unknown>>, focusDispatcher: FocusDispatcher, ngZone: NgZone);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    private _listenForTableEvents;\n}\n/**\n * Attaches an ng-template to a cell and shows it when instructed to by the\n * EditEventDispatcher service.\n * Makes the cell focusable.\n */\nexport declare class CdkPopoverEdit<C> implements AfterViewInit, OnDestroy {\n    protected readonly services: EditServices;\n    protected readonly elementRef: ElementRef;\n    protected readonly viewContainerRef: ViewContainerRef;\n    /** The edit lens template shown over the cell on edit. */\n    template: TemplateRef<any> | null;\n    /**\n     * Implicit context to pass along to the template. Can be omitted if the template\n     * is defined within the cell.\n     */\n    context?: C;\n    /**\n     * Specifies that the popup should cover additional table cells before and/or after\n     * this one.\n     */\n    get colspan(): CdkPopoverEditColspan;\n    set colspan(value: CdkPopoverEditColspan);\n    private _colspan;\n    /** Whether popover edit is disabled for this cell. */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _disabled;\n    protected focusTrap?: FocusTrap;\n    protected overlayRef?: OverlayRef;\n    protected readonly destroyed: Subject<void>;\n    constructor(services: EditServices, elementRef: ElementRef, viewContainerRef: ViewContainerRef);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    protected initFocusTrap(): void;\n    protected closeEditOverlay(): void;\n    protected panelClass(): string;\n    private _startListeningToEditEvents;\n    private _createEditOverlay;\n    private _showEditOverlay;\n    private _getOverlayCells;\n    private _getPositionStrategy;\n    private _updateOverlaySize;\n    private _maybeReturnFocusToCell;\n}\n/**\n * Attaches an ng-template to a cell and shows it when instructed to by the\n * EditEventDispatcher service.\n * Makes the cell focusable.\n */\nexport declare class CdkPopoverEditTabOut<C> extends CdkPopoverEdit<C> {\n    protected readonly focusEscapeNotifierFactory: FocusEscapeNotifierFactory;\n    protected focusTrap?: FocusEscapeNotifier;\n    constructor(elementRef: ElementRef, viewContainerRef: ViewContainerRef, services: EditServices, focusEscapeNotifierFactory: FocusEscapeNotifierFactory);\n    protected initFocusTrap(): void;\n}\n/**\n * A structural directive that shows its contents when the table row containing\n * it is hovered or when an element in the row has focus.\n */\nexport declare class CdkRowHoverContent implements AfterViewInit, OnDestroy {\n    protected readonly services: EditServices;\n    protected readonly elementRef: ElementRef;\n    protected readonly templateRef: TemplateRef<any>;\n    protected readonly viewContainerRef: ViewContainerRef;\n    protected readonly destroyed: Subject<void>;\n    protected viewRef: EmbeddedViewRef<any> | null;\n    private _row?;\n    constructor(services: EditServices, elementRef: ElementRef, templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Called immediately after the hover content is created and added to the dom.\n     * In the CDK version, this is a noop but subclasses such as MatRowHoverContent use this\n     * to prepare/style the inserted element.\n     */\n    protected initElement(_: HTMLElement): void;\n    /**\n     * Called when the hover content needs to be focusable to preserve a reasonable tab ordering\n     * but should not yet be shown.\n     */\n    protected makeElementHiddenButFocusable(element: HTMLElement): void;\n    /**\n     * Called when the hover content needs to be focusable to preserve a reasonable tab ordering\n     * but should not yet be shown.\n     */\n    protected makeElementVisible(element: HTMLElement): void;\n    private _listenForHoverAndFocusEvents;\n}\n/**\n * Opens the closest edit popover to this element, whether it's associated with this exact\n * element or an ancestor element.\n */\nexport declare class CdkEditOpen {\n    protected readonly elementRef: ElementRef<HTMLElement>;\n    protected readonly editEventDispatcher: EditEventDispatcher<EditRef<unknown>>;\n    constructor(elementRef: ElementRef<HTMLElement>, editEventDispatcher: EditEventDispatcher<EditRef<unknown>>);\n    openEdit(evt: Event): void;\n}\n"]}