{"version":3,"file":"listbox.d.ts","sources":["listbox.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ElementRef, EventEmitter, InjectionToken, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { ActiveDescendantKeyManager, Highlightable, ListKeyManagerOption } from '@angular/cdk/a11y';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Observable } from 'rxjs';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CdkComboboxPanel } from '@angular/cdk-experimental/combobox';\nimport { Directionality } from '@angular/cdk/bidi';\nexport declare const CDK_LISTBOX_VALUE_ACCESSOR: any;\nexport declare const PANEL: InjectionToken<CdkComboboxPanel<unknown>>;\nexport declare class CdkOption<T = unknown> implements ListKeyManagerOption, Highlightable {\n    private readonly _elementRef;\n    readonly listbox: CdkListbox<T>;\n    private _selected;\n    private _disabled;\n    private _value;\n    _active: boolean;\n    /** The id of the option, set to a uniqueid if the user does not provide one. */\n    id: string;\n    get selected(): boolean;\n    set selected(value: boolean);\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    /** The form value of the option. */\n    get value(): T;\n    set value(value: T);\n    readonly selectionChange: EventEmitter<OptionSelectionChangeEvent<T>>;\n    constructor(_elementRef: ElementRef, listbox: CdkListbox<T>);\n    /** Toggles the selected state, emits a change event through the injected listbox. */\n    toggle(): void;\n    /** Sets the active property true if the option and listbox aren't disabled. */\n    activate(): void;\n    /** Sets the active property false. */\n    deactivate(): void;\n    /** Sets the selected property true if it was false. */\n    select(): void;\n    /** Sets the selected property false if it was true. */\n    deselect(): void;\n    /** Applies focus to the option. */\n    focus(): void;\n    /** Returns true if the option or listbox are disabled, and false otherwise. */\n    _isInteractionDisabled(): boolean;\n    /** Emits a change event extending the Option Selection Change Event interface. */\n    private _emitSelectionChange;\n    /** Returns the tab index which depends on the disabled property. */\n    _getTabIndex(): string | null;\n    /** Get the label for this element which is required by the FocusableOption interface. */\n    getLabel(): string;\n    /** Remove any child from the given element which can be identified as an icon. */\n    private _removeIcons;\n    getElementRef(): ElementRef<any>;\n    /** Sets the active property to true to enable the active css class. */\n    setActiveStyles(): void;\n    /** Sets the active property to false to disable the active css class. */\n    setInactiveStyles(): void;\n    static ngAcceptInputType_selected: BooleanInput;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\nexport declare class CdkListbox<T> implements AfterContentInit, OnDestroy, OnInit, ControlValueAccessor {\n    readonly _parentPanel?: CdkComboboxPanel<T> | undefined;\n    private readonly _dir?;\n    _listKeyManager: ActiveDescendantKeyManager<CdkOption<T>>;\n    _selectionModel: SelectionModel<CdkOption<T>>;\n    _tabIndex: number;\n    /** `View -> model callback called when select has been touched` */\n    _onTouched: () => void;\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: T) => void;\n    readonly optionSelectionChanges: Observable<OptionSelectionChangeEvent<T>>;\n    private _disabled;\n    private _multiple;\n    private _useActiveDescendant;\n    private _autoFocus;\n    private _activeOption;\n    private readonly _destroyed;\n    _options: QueryList<CdkOption<T>>;\n    readonly selectionChange: EventEmitter<ListboxSelectionChangeEvent<T>>;\n    id: string;\n    /**\n     * Whether the listbox allows multiple options to be selected.\n     * If `multiple` switches from `true` to `false`, all options are deselected.\n     */\n    get multiple(): boolean;\n    set multiple(value: boolean);\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    /** Whether the listbox will use active descendant or will move focus onto the options. */\n    get useActiveDescendant(): boolean;\n    set useActiveDescendant(shouldUseActiveDescendant: boolean);\n    /** Whether on focus the listbox will focus its active option, default to true. */\n    get autoFocus(): boolean;\n    set autoFocus(shouldAutoFocus: boolean);\n    /** Determines the orientation for the list key manager. Affects keyboard interaction. */\n    orientation: 'horizontal' | 'vertical';\n    compareWith: (o1: T, o2: T) => boolean;\n    private readonly _explicitPanel;\n    constructor(_parentPanel?: CdkComboboxPanel<T> | undefined, _dir?: Directionality | undefined);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    private _registerWithPanel;\n    private _initKeyManager;\n    private _initSelectionModel;\n    _keydown(event: KeyboardEvent): void;\n    /** Emits a selection change event, called when an option has its selected state changed. */\n    _emitChangeEvent(option: CdkOption<T>): void;\n    /** Updates the selection model after a toggle. */\n    _updateSelectionModel(option: CdkOption<T>): void;\n    _updatePanelForSelection(option: CdkOption<T>): void;\n    /** Toggles the selected state of the active option if not disabled. */\n    private _toggleActiveOption;\n    /** Returns the id of the active option if active descendant is being used. */\n    _getAriaActiveDescendant(): string | null | undefined;\n    /** Updates the activeOption and the active and focus properties of the option. */\n    private _updateActiveOption;\n    /** Updates selection states of options when the 'multiple' property changes. */\n    private _updateSelectionOnMultiSelectionChange;\n    _focusActiveOption(): void;\n    /** Selects the given option if the option and listbox aren't disabled. */\n    select(option: CdkOption<T>): void;\n    /** Deselects the given option if the option and listbox aren't disabled. */\n    deselect(option: CdkOption<T>): void;\n    /** Sets the selected state of all options to be the given value. */\n    setAllSelected(isSelected: boolean): void;\n    /** Updates the key manager's active item to the given option. */\n    setActiveOption(option: CdkOption<T>): void;\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Required to implement ControlValueAccessor.\n     */\n    registerOnChange(fn: (value: T) => void): void;\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Required to implement ControlValueAccessor.\n     */\n    registerOnTouched(fn: () => {}): void;\n    /** Sets the select's value. Required to implement ControlValueAccessor. */\n    writeValue(values: T | T[]): void;\n    /** Disables the select. Required to implement ControlValueAccessor. */\n    setDisabledState(isDisabled: boolean): void;\n    /** Returns the values of the currently selected options. */\n    getSelectedValues(): T[];\n    /** Selects an option that has the corresponding given value. */\n    private _setSelectionByValue;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_multiple: BooleanInput;\n    static ngAcceptInputType_useActiveDescendant: BooleanInput;\n    static ngAcceptInputType_autoFocus: BooleanInput;\n}\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport interface ListboxSelectionChangeEvent<T> {\n    /** Reference to the listbox that emitted the event. */\n    readonly source: CdkListbox<T>;\n    /** Reference to the option that has been changed. */\n    readonly option: CdkOption<T>;\n}\n/** Event object emitted by MatOption when selected or deselected. */\nexport interface OptionSelectionChangeEvent<T> {\n    /** Reference to the option that emitted the event. */\n    source: CdkOption<T>;\n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput: boolean;\n}\n"]}