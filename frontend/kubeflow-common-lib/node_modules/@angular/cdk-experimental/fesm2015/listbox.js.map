{"version":3,"file":"listbox.js","sources":["../../../../../../src/cdk-experimental/listbox/listbox.ts","../../../../../../src/cdk-experimental/listbox/listbox-module.ts","../../../../../../src/cdk-experimental/listbox/public-api.ts","../../../../../../src/cdk-experimental/listbox/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  ElementRef, EventEmitter, forwardRef,\n  Inject, InjectionToken,\n  Input, OnDestroy, OnInit, Optional, Output,\n  QueryList\n} from '@angular/core';\nimport {ActiveDescendantKeyManager, Highlightable, ListKeyManagerOption} from '@angular/cdk/a11y';\nimport {DOWN_ARROW, ENTER, SPACE, UP_ARROW, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {BooleanInput, coerceBooleanProperty, coerceArray} from '@angular/cdk/coercion';\nimport {SelectionChange, SelectionModel} from '@angular/cdk/collections';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CdkComboboxPanel} from '@angular/cdk-experimental/combobox';\nimport {Directionality} from '@angular/cdk/bidi';\n\nlet nextId = 0;\nlet listboxId = 0;\n\nexport const CDK_LISTBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CdkListbox),\n  multi: true\n};\n\nexport const PANEL = new InjectionToken<CdkComboboxPanel>('CdkComboboxPanel');\n\n@Directive({\n  selector: '[cdkOption]',\n  exportAs: 'cdkOption',\n  host: {\n    'role': 'option',\n    'class': 'cdk-option',\n    '(click)': 'toggle()',\n    '(focus)': 'activate()',\n    '(blur)': 'deactivate()',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected || null',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': '_isInteractionDisabled()',\n    '[class.cdk-option-disabled]': '_isInteractionDisabled()',\n    '[class.cdk-option-active]': '_active',\n    '[class.cdk-option-selected]': 'selected'\n  }\n})\nexport class CdkOption<T = unknown> implements ListKeyManagerOption, Highlightable {\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n  private _value: T;\n  _active: boolean = false;\n\n  /** The id of the option, set to a uniqueid if the user does not provide one. */\n  @Input() id = `cdk-option-${nextId++}`;\n\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    if (!this._disabled) {\n      this._selected = coerceBooleanProperty(value);\n    }\n  }\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** The form value of the option. */\n  @Input()\n  get value(): T {\n    return this._value;\n  }\n  set value(value: T) {\n    if (this.selected && value !== this._value) {\n      this.deselect();\n    }\n    this._value = value;\n  }\n\n  @Output() readonly selectionChange =\n      new EventEmitter<OptionSelectionChangeEvent<T>>();\n\n  constructor(private readonly _elementRef: ElementRef,\n              @Inject(forwardRef(() => CdkListbox)) readonly listbox: CdkListbox<T>) {\n  }\n\n  /** Toggles the selected state, emits a change event through the injected listbox. */\n  toggle() {\n    if (!this._isInteractionDisabled()) {\n      this.selected = !this.selected;\n      this._emitSelectionChange(true);\n    }\n  }\n\n  /** Sets the active property true if the option and listbox aren't disabled. */\n  activate() {\n    if (!this._isInteractionDisabled()) {\n      this._active = true;\n    }\n  }\n\n  /** Sets the active property false. */\n  deactivate() {\n    if (!this._isInteractionDisabled()) {\n      this._active = false;\n    }\n  }\n\n  /** Sets the selected property true if it was false. */\n  select() {\n    if (!this.selected) {\n      this.selected = true;\n      this._emitSelectionChange();\n    }\n  }\n\n  /** Sets the selected property false if it was true. */\n  deselect() {\n    if (this.selected) {\n      this.selected = false;\n      this._emitSelectionChange();\n    }\n  }\n\n  /** Applies focus to the option. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Returns true if the option or listbox are disabled, and false otherwise. */\n  _isInteractionDisabled(): boolean {\n    return (this.listbox.disabled || this._disabled);\n  }\n\n  /** Emits a change event extending the Option Selection Change Event interface. */\n  private _emitSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: isUserInput\n    });\n  }\n\n  /** Returns the tab index which depends on the disabled property. */\n  _getTabIndex(): string | null {\n    return this._isInteractionDisabled() ? null : '-1';\n  }\n\n  /** Get the label for this element which is required by the FocusableOption interface. */\n  getLabel() {\n    // we know that the current node is an element type\n    const clone = this._elementRef.nativeElement.cloneNode(true) as Element;\n    this._removeIcons(clone);\n\n    return clone.textContent?.trim() || '';\n  }\n\n  /** Remove any child from the given element which can be identified as an icon. */\n  private _removeIcons(element: Element) {\n    // TODO: make this a configurable function that can removed any desired type of node.\n    for (const icon of Array.from(element.querySelectorAll('mat-icon, .material-icons'))) {\n      icon.parentNode?.removeChild(icon);\n    }\n  }\n\n  getElementRef() {\n    return this._elementRef;\n  }\n\n  /** Sets the active property to true to enable the active css class. */\n  setActiveStyles() {\n    this._active = true;\n  }\n\n  /** Sets the active property to false to disable the active css class. */\n  setInactiveStyles() {\n    this._active = false;\n  }\n\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Directive({\n  selector: '[cdkListbox]',\n  exportAs: 'cdkListbox',\n  host: {\n    'role': 'listbox',\n    'class': 'cdk-listbox',\n    '[id]': 'id',\n    '(focus)': '_focusActiveOption()',\n    '(keydown)': '_keydown($event)',\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[attr.aria-orientation]': 'orientation'\n  },\n  providers: [CDK_LISTBOX_VALUE_ACCESSOR]\n})\nexport class CdkListbox<T> implements AfterContentInit, OnDestroy, OnInit, ControlValueAccessor {\n\n  _listKeyManager: ActiveDescendantKeyManager<CdkOption<T>>;\n  _selectionModel: SelectionModel<CdkOption<T>>;\n  _tabIndex = 0;\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched: () => void = () => {};\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: T) => void = () => {};\n\n  readonly optionSelectionChanges: Observable<OptionSelectionChangeEvent<T>> = defer(() => {\n    const options = this._options;\n\n    return options.changes.pipe(\n      startWith(options),\n      switchMap(() => merge(...options.map(option => option.selectionChange)))\n    );\n  }) as Observable<OptionSelectionChangeEvent<T>>;\n\n  private _disabled: boolean = false;\n  private _multiple: boolean = false;\n  private _useActiveDescendant: boolean = false;\n  private _autoFocus: boolean = true;\n  private _activeOption: CdkOption<T>;\n  private readonly _destroyed = new Subject<void>();\n\n  @ContentChildren(CdkOption, {descendants: true}) _options: QueryList<CdkOption<T>>;\n\n  @Output() readonly selectionChange =\n      new EventEmitter<ListboxSelectionChangeEvent<T>>();\n\n  @Input() id = `cdk-listbox-${listboxId++}`;\n\n  /**\n   * Whether the listbox allows multiple options to be selected.\n   * If `multiple` switches from `true` to `false`, all options are deselected.\n   */\n  @Input()\n  get multiple(): boolean {\n    return this._multiple;\n  }\n  set multiple(value: boolean) {\n    this._updateSelectionOnMultiSelectionChange(value);\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the listbox will use active descendant or will move focus onto the options. */\n  @Input()\n  get useActiveDescendant(): boolean {\n    return this._useActiveDescendant;\n  }\n  set useActiveDescendant(shouldUseActiveDescendant: boolean) {\n    this._useActiveDescendant = coerceBooleanProperty(shouldUseActiveDescendant);\n  }\n\n  /** Whether on focus the listbox will focus its active option, default to true. */\n  @Input()\n  get autoFocus(): boolean {\n    return this._autoFocus;\n  }\n  set autoFocus(shouldAutoFocus: boolean) {\n    this._autoFocus = coerceBooleanProperty(shouldAutoFocus);\n  }\n\n  /** Determines the orientation for the list key manager. Affects keyboard interaction. */\n  @Input('listboxOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  @Input() compareWith: (o1: T, o2: T) => boolean = (a1, a2) => a1 === a2;\n\n  @Input('parentPanel') private readonly _explicitPanel: CdkComboboxPanel;\n\n  constructor(\n    @Optional() @Inject(PANEL) readonly _parentPanel?: CdkComboboxPanel<T>,\n    @Optional() private readonly _dir?: Directionality\n  ) { }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<CdkOption<T>>(this.multiple);\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n    this._initSelectionModel();\n    this._registerWithPanel();\n\n    this.optionSelectionChanges.subscribe(event => {\n      this._emitChangeEvent(event.source);\n      this._updateSelectionModel(event.source);\n      this.setActiveOption(event.source);\n      this._updatePanelForSelection(event.source);\n    });\n  }\n\n  ngOnDestroy() {\n    this._listKeyManager.change.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  private _registerWithPanel(): void {\n    const panel = this._parentPanel || this._explicitPanel;\n    panel?._registerContent(this.id, 'listbox');\n  }\n\n  private _initKeyManager() {\n    this._listKeyManager = new ActiveDescendantKeyManager(this._options)\n        .withWrap()\n        .withTypeAhead()\n        .withHomeAndEnd()\n        .withAllowedModifierKeys(['shiftKey']);\n\n    if (this.orientation === 'vertical') {\n      this._listKeyManager.withVerticalOrientation();\n    } else {\n      this._listKeyManager.withHorizontalOrientation(this._dir?.value || 'ltr');\n    }\n\n    this._listKeyManager.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._updateActiveOption();\n    });\n  }\n\n  private _initSelectionModel() {\n    this._selectionModel.changed.pipe(takeUntil(this._destroyed))\n        .subscribe((event: SelectionChange<CdkOption<T>>) => {\n\n      for (const option of event.added) {\n        option.selected = true;\n      }\n\n      for (const option of event.removed) {\n        option.selected = false;\n      }\n    });\n  }\n\n  _keydown(event: KeyboardEvent) {\n    if (this._disabled) {\n      return;\n    }\n\n    const manager = this._listKeyManager;\n    const {keyCode} = event;\n    const previousActiveIndex = manager.activeItemIndex;\n\n    if (keyCode === SPACE || keyCode === ENTER) {\n      if (manager.activeItem && !manager.isTyping()) {\n        this._toggleActiveOption();\n      }\n      event.preventDefault();\n\n    } else {\n      manager.onKeydown(event);\n    }\n\n    /** Will select an option if shift was pressed while navigating to the option */\n    const isArrow = (keyCode === UP_ARROW\n        || keyCode === DOWN_ARROW\n        || keyCode === LEFT_ARROW\n        || keyCode === RIGHT_ARROW);\n    if (isArrow && event.shiftKey && previousActiveIndex !== this._listKeyManager.activeItemIndex) {\n      this._toggleActiveOption();\n    }\n  }\n\n  /** Emits a selection change event, called when an option has its selected state changed. */\n  _emitChangeEvent(option: CdkOption<T>) {\n    this.selectionChange.emit({\n      source: this,\n      option: option\n    });\n  }\n\n  /** Updates the selection model after a toggle. */\n  _updateSelectionModel(option: CdkOption<T>) {\n    if (!this.multiple && this._selectionModel.selected.length !== 0) {\n      const previouslySelected = this._selectionModel.selected[0];\n      this.deselect(previouslySelected);\n    }\n\n    option.selected ? this._selectionModel.select(option) :\n                      this._selectionModel.deselect(option);\n  }\n\n  _updatePanelForSelection(option: CdkOption<T>) {\n    const panel = this._parentPanel || this._explicitPanel;\n    if (!this.multiple) {\n      option.selected ? panel?.closePanel(option.value) : panel?.closePanel();\n    } else {\n      panel?.closePanel(this.getSelectedValues());\n    }\n  }\n\n  /** Toggles the selected state of the active option if not disabled. */\n  private _toggleActiveOption() {\n    const activeOption = this._listKeyManager.activeItem;\n    if (activeOption && !activeOption.disabled) {\n      activeOption.toggle();\n    }\n  }\n\n  /** Returns the id of the active option if active descendant is being used. */\n  _getAriaActiveDescendant(): string | null | undefined {\n    return this._useActiveDescendant ? this._listKeyManager?.activeItem?.id : null;\n  }\n\n  /** Updates the activeOption and the active and focus properties of the option. */\n  private _updateActiveOption() {\n    if (!this._listKeyManager.activeItem) {\n      return;\n    }\n\n    this._activeOption?.deactivate();\n    this._activeOption = this._listKeyManager.activeItem;\n    this._activeOption.activate();\n\n    if (!this.useActiveDescendant) {\n      this._activeOption.focus();\n    }\n  }\n\n  /** Updates selection states of options when the 'multiple' property changes. */\n  private _updateSelectionOnMultiSelectionChange(value: boolean) {\n    if (this.multiple && !value) {\n      // Deselect all options instead of arbitrarily keeping one of the selected options.\n      this.setAllSelected(false);\n    } else if (!this.multiple && value) {\n      this._selectionModel =\n          new SelectionModel<CdkOption<T>>(value, this._selectionModel?.selected);\n    }\n  }\n\n  _focusActiveOption() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    if (this._listKeyManager.activeItem) {\n      this.setActiveOption(this._listKeyManager.activeItem);\n    } else if (this._options.first) {\n      this.setActiveOption(this._options.first);\n    }\n  }\n\n  /** Selects the given option if the option and listbox aren't disabled. */\n  select(option: CdkOption<T>) {\n    if (!this.disabled && !option.disabled) {\n      option.select();\n    }\n  }\n\n  /** Deselects the given option if the option and listbox aren't disabled. */\n  deselect(option: CdkOption<T>) {\n    if (!this.disabled && !option.disabled) {\n      option.deselect();\n    }\n  }\n\n  /** Sets the selected state of all options to be the given value. */\n  setAllSelected(isSelected: boolean) {\n    for (const option of this._options.toArray()) {\n      isSelected ? this.select(option) : this.deselect(option);\n    }\n  }\n\n  /** Updates the key manager's active item to the given option. */\n  setActiveOption(option: CdkOption<T>) {\n    this._listKeyManager.updateActiveItem(option);\n    this._updateActiveOption();\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Required to implement ControlValueAccessor.\n   */\n  registerOnChange(fn: (value: T) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Required to implement ControlValueAccessor.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the select's value. Required to implement ControlValueAccessor. */\n  writeValue(values: T | T[]): void {\n    if (this._options) {\n      this._setSelectionByValue(values);\n    }\n  }\n\n  /** Disables the select. Required to implement ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Returns the values of the currently selected options. */\n  getSelectedValues(): T[] {\n    return this._options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Selects an option that has the corresponding given value. */\n  private _setSelectionByValue(values: T | T[]) {\n    for (const option of this._options.toArray()) {\n      this.deselect(option);\n    }\n\n    const valuesArray = coerceArray(values);\n    for (const value of valuesArray) {\n      const correspondingOption = this._options.find((option: CdkOption<T>) => {\n        return option.value != null && this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        this.select(correspondingOption);\n        if (!this.multiple) {\n          return;\n        }\n      }\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_useActiveDescendant: BooleanInput;\n  static ngAcceptInputType_autoFocus: BooleanInput;\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport interface ListboxSelectionChangeEvent<T> {\n  /** Reference to the listbox that emitted the event. */\n  readonly source: CdkListbox<T>;\n\n  /** Reference to the option that has been changed. */\n  readonly option: CdkOption<T>;\n}\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport interface OptionSelectionChangeEvent<T> {\n  /** Reference to the option that emitted the event. */\n  source: CdkOption<T>;\n\n  /** Whether the change in the option's value was a result of a user action. */\n  isUserInput: boolean;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkListbox, CdkOption} from './listbox';\n\nconst EXPORTED_DECLARATIONS = [CdkListbox, CdkOption];\n@NgModule({\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class CdkListboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './listbox';\nexport * from './listbox-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}