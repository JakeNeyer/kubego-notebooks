{"version":3,"file":"column-resize.js","sources":["../../../../../../src/cdk-experimental/column-resize/selectors.ts","../../../../../../src/cdk-experimental/column-resize/column-resize.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-notifier.ts","../../../../../../src/cdk-experimental/column-resize/event-dispatcher.ts","../../../../../../src/cdk-experimental/column-resize/resize-strategy.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-directives/constants.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-directives/column-resize.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-directives/column-resize-flex.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-directives/default-enabled-column-resize.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-directives/default-enabled-column-resize-flex.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-module.ts","../../../../../../src/cdk-experimental/column-resize/column-size-store.ts","../../../../../../src/cdk-experimental/column-resize/resize-ref.ts","../../../../../../src/cdk-experimental/column-resize/resizable.ts","../../../../../../src/cdk-experimental/column-resize/overlay-handle.ts","../../../../../../src/cdk-experimental/column-resize/public-api.ts","../../../../../../src/cdk-experimental/column-resize/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEO,MAAM,oBAAoB,GAAG,oCAAoC,CAAC;AAElE,MAAM,mBAAmB,GAAG,kCAAkC,CAAC;AAE/D,MAAM,uBAAuB,GAAG,kCAAkC;AACzE;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA,MAAM,qBAAqB,GAAG,mCAAmC,CAAC;AAClE,MAAM,yBAAyB,GAAG,uCAAuC,CAAC;AAE1E,IAAI,MAAM,GAAG,CAAC,CAAC;AAEf;AACA;AACA;AACA;AACA,MACsB,YAAY;AAAG,IADrC;AACG,QACkB,cAAS,GAAG,IAAI,OAAO,EAAQ,CAAC;AACrD;AACiD,QAW5B,eAAU,GAAG,GAAG,EAAE,MAAM,EAAE,CAAC;AAChD,KAuEC;AACD,IApEE,eAAe;AACjB,QAAI,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;AAC3E,QACI,IAAI,CAAC,wBAAwB,EAAE,CAAC;AACpC,QAAI,IAAI,CAAC,wBAAwB,EAAE,CAAC;AACpC,QAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;AACnC,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;AAC1B,QAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;AAC9B,KAAG;AACH;AAEC,IAAC,iBAAiB;AACnB,QAAI,OAAO,qBAAqB,IAAI,CAAC,UAAU,EAAE,CAAC;AAClD,KAAG;AACH;AAEC,IAAC,UAAU;AACZ,QAAI,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,SAAS,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;AAC5E,KAAG;AACH,IACU,wBAAwB;AAClC,QAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;AAClC,YAAM,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC;AACrD,YACM,SAAS,CAAa,OAAO,EAAE,WAAW,CAAC,CAAC,IAAI,CAC5C,GAAG,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC,EAC1D,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CACxB,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;AAC9D,YAAM,SAAS,CAAa,OAAO,EAAE,YAAY,CAAC,CAAC,IAAI,CAC7C,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,aAAa;AAC/C,gBAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAwB,EAAE,uBAAuB,CAAC,CAAC,EACvE,KAAK,CAAC,IAAI,CAAC,EACX,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CACxB,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;AAC9D,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,wBAAwB;AAClC,QAAI,KAAK,CACD,IAAI,CAAC,eAAe,CAAC,0BAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EACtE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAClD,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CACvD,CAAC,IAAI,CACJ,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAC1B,CAAC,SAAS,CAAC;AAChB,YAAM,IAAI,CAAC,UAAU,EAAE,CAAC;AACxB,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,uBAAuB;AACjC,QAAI,IAAI,CAAC,eAAe,CAAC,gCAAgC,CAAC,IAAI,CACtD,SAAS,CAAC,IAAI,CAAC,EACf,QAAQ,EAAE,EACV,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAC5B,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC;AAC1C,YAAM,IAAI,UAAU,EAAE;AACtB,gBAAQ,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;AACxD,aAAO;AACP,YAAM,IAAI,WAAW,EAAE;AACvB,gBAAQ,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAC5D,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG;AACH;wCAvFC,SAAS;;;;gDACR;AAAC;AC5BH;AACA;AACA;AACA;AACA;AACA;AACA;AAgCA;AACA;AACA;AACA;AACA,MACa,0BAA0B;AACvC,IAFA;AACE;AACmB,QACV,mBAAc,GAAG,IAAI,OAAO,EAAoB,CAAC;AAC5D;AAEK,QAAM,oBAAe,GAAG,IAAI,OAAO,EAAc,CAAC;AACvD;AAEK,QAAM,kBAAa,GAAG,IAAI,OAAO,EAAoB,CAAC;AAC3D,KAAC;AACD;sDAXC,UAAU;;;;gDACT;AAWF;AACA,MACa,oBAAoB;AACjC,IAGE,YAA6B,OAAmC;AAAI,QAAvC,YAAO,GAAP,OAAO,CAA4B;AAAC;AAErB,QAJnC,oBAAe,GAA2B,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;AAClF,KACsE;AACtE;AAEC,IAAC,MAAM,CAAC,QAAgB,EAAE,IAAY;AAAI,QACvC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAC3B,EAAC,QAAQ,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAC,CAAC,CAAC;AAC3E,KAAG;AACH;gDAZC,UAAU;0IACT;AAAC;AACU,YAG2B,0BAA0B;AAAG;;;oFACrE;AACA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA,MACa,wBAAwB;AACrC,IAaE,YAA6B,OAAe;AAAI,QAAnB,YAAO,GAAP,OAAO,CAAQ;AAAC;AAExC;AACkC;AAMpB;AAA0B;AAAY,QAjBhD,sBAAiB,GAAG,IAAI,OAAO,EAAgB,CAAC;AAC3D;AAEK;AACM;AAEA;AAAY,QAAZ,+BAA0B,GAAG,IAAI,OAAO,EAAgB,CAAC;AACpE;AAGY,QACD,8BAAyB,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAC5D,oBAAoB,EAAE,EACtB,KAAK,EAAE,CACV,CAAC;AACJ;AAEK;AACM;AAEA;AAAY,QAAZ,qCAAgC,GAAG,aAAa,CAAC;AAC5D,YAAM,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAC/B,GAAG,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC,EAChD,SAAS,CAAC,IAAI,CAAC,EACf,oBAAoB,EAAE,CACxB;AACR,YAAM,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAChC,GAAG,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC,EAChD,SAAS,CAAC,IAAI,CAAC,EACf,oBAAoB,EAAE,CACzB;AACP,SAAG,CAAC,CAAC,IAAI,CACH,IAAI,CAAC,CAAC,CAAC;AACb,QAAM,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,CAAC,EAC7C,oBAAoB,EAAE,EACtB,KAAK,EAAE,CACV,CAAC;AACJ,QACmB,iDAA4C,GACzD,IAAI,CAAC,gCAAgC,CAAC,IAAI,CACtC,IAAI,CAAC,UAAU,EAAE,EACjB,KAAK,EAAE,CACV,CAAC;AACR;AAEK;AACM,QAAD,iBAAY,GAAiB,IAAI,CAAC;AAC5C,QAAU,sBAAiB,GAA6B,IAAI,CAAC;AAC7D,KAxCkD;AAClD;AACO;AACc;AAA0C;AAC5D,IAyCD,gCAAgC,CAAC,GAAY;AAAI,QAC/C,IAAI,GAAG,KAAK,IAAI,CAAC,YAAY,EAAE;AACnC,YAAM,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;AAC9B,YAAM,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,4CAA4C,CAAC,IAAI,CAC7E,GAAG,CAAC,UAAU,IAAI,UAAU,KAAK,GAAG,CAAC,EACrC,oBAAoB,EAAE,EACtB,KAAK,EAAE,CACR,CAAC;AACR,SAAK;AACL,QACI,OAAO,IAAI,CAAC,iBAAkB,CAAC;AACnC,KAAG;AACH,IACU,UAAU;AAAK,QACrB,OAAO,CAAC,MAAqB,KACzB,IAAI,UAAU,CAAI,CAAC,QAAQ,KAAK,MAAM,CAAC,SAAS,CAAC;AACzD,YAAU,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACvE,YAAU,KAAK,EAAE,CAAC,GAAG,KAAK,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;AAC7C,YAAU,QAAQ,EAAE,MAAM,QAAQ,CAAC,QAAQ,EAAE;AAC7C,SAAS,CAAC,CAAC,CAAC;AACZ,KAAG;AACH;oDAjFC,UAAU;sJACT;AAAC;AAEI,YAZa,MAAM;AAAG;;;uEAAE;AAAC;ACRhC;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA,MACsB,cAAc;AACpC,IAFA;AACE,QAKQ,wBAAmB,GAAgB,IAAI,CAAC;AAClD,KAuCC;AACD;AAEqE,IArBzD,gCAAgC,CAAC,KAAa;AAAI;AACpD,QAAN,IAAI,IAAI,CAAC,mBAAmB,KAAK,IAAI,EAAE;AAC3C,YAAM,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC;AACtE,YAAM,MAAM,UAAU,GAAG,eAAe,CAAC,YAAY,CAAC,CAAC;AACvD,YACM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;AACnC,gBAAQ,YAAY,CAAC,KAAK,CAAC,KAAK,GAAG,mBAAmB,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAoB,CAAC,CAAC;AAC/F,gBACQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;AACxC,aAAO,CAAC,CAAC;AACT,YACM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;AACtC,gBAAQ,IAAI,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAC;AAC9C,aAAO,CAAC,CAAC;AACT,SAAK;AACL,QACI,IAAI,CAAC,mBAAmB,GAAG,CAAC,MAAA,IAAI,CAAC,mBAAmB,mCAAI,CAAC,IAAI,KAAK,CAAC;AACvE,KAAG;AACH;0CA9CC,UAAU;;;;gDACT;AA+CF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MACa,8BAA+B,SAAQ,cAAc;AAClE,IAAE,YACuB,YAA0B,EAEtB,cAAwC,EAC5C,KAAwB;AACjD,QAAI,KAAK,EAAE,CAAC;AACZ,QALyB,iBAAY,GAAZ,YAAY,CAAc;AAAC,QAEvB,mBAAc,GAAd,cAAc,CAA0B;AAAC,QAC7C,UAAK,GAAL,KAAK,CAAmB;AAAC,KAE/C;AACH,IACE,eAAe,CAAC,CAAS,EAAE,YAAyB,EAAE,QAAgB,EAClE,gBAAyB;AAAI,QAC/B,MAAM,KAAK,GAAG,QAAQ,IAAI,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,GAAI,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC;AACjF,QACI,IAAI,KAAK,KAAK,CAAC,EAAE;AACrB,YAAM,OAAO;AACb,SAAK;AACL,QACI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;AACjC,YAAM,YAAY,CAAC,KAAK,CAAC,KAAK,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAC/D,SAAK,CAAC,CAAC;AACP,QACI,IAAI,CAAC,gCAAgC,CAAC,KAAK,CAAC,CAAC;AACjD,KAAG;AACH,IACE,kBAAkB,CAAC,CAAS,EAAE,YAAyB,EAAE,QAAgB;AAAI,QAC3E,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC,CAAC;AACvD,QAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;AACtD,QACI,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;AAClE,KAAG;AACH,IACE,kBAAkB,CAAC,CAAS,EAAE,YAAyB,EAAE,QAAgB;AAAI,QAC3E,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC,CAAC;AACvD,QAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;AACtD,QACI,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;AAClE,KAAG;AACH;0DAtCC,UAAU;wKACT;AAAC;AAAwD,YA9DnD,YAAY;AAAI,YAFN,wBAAwB,uBAmEnC,MAAM,SAAC,0BAA0B;AACjC,YApEC,QAAQ;AAAG;;;;;;6DAAE;AAuGrB;AACA;AACA;AACA;AACA;AACA;AACA,MACa,0BAA2B,SAAQ,cAAc;AAAG,IAW/D,YACuB,YAA0B,EAEtB,cAAwC,EAC5C,KAAwB,EACzB,QAAa;AACrC,QAAI,KAAK,EAAE,CAAC;AACZ,QANyB,iBAAY,GAAZ,YAAY,CAAc;AAAC,QAEvB,mBAAc,GAAd,cAAc,CAA0B;AAAC,QAC7C,UAAK,GAAL,KAAK,CAAmB;AAAC,QAb/B,mBAAc,GAAG,IAAI,GAAG,EAAkB,CAAC;AAC9D,QAAmB,sBAAiB,GAAG,IAAI,GAAG,EAA+B,CAAC;AAC9E,QAEU,mBAAc,GAAG,CAAC,CAAC;AAC7B,QACqB,mBAAc,GAAG,CAAC,CAAC;AACxC,QAAqB,mBAAc,GAAG,MAAM,CAAC,gBAAgB,CAAC;AAC9D,QAQI,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC9B,KAAG;AACH,IACE,eAAe,CAAC,qBAA6B,EAAE,YAAyB,EACpE,QAAgB,EAAE,gBAAyB;AAAI;AACqC;AAExF,QAAE,MAAM,KAAK,GAAG,QAAQ,IAAI,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,IACrC,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC;AACpF,QACI,IAAI,KAAK,KAAK,CAAC,EAAE;AACrB,YAAM,OAAO;AACb,SAAK;AACL,QACI,MAAM,OAAO,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAClD,QACI,IAAI,CAAC,cAAc,CAAC,qBAAqB,EAAE,MAAM,EAAE,UAAU,OAAO,EAAE,CAAC,CAAC;AAC5E,QAAI,IAAI,CAAC,gCAAgC,CAAC,KAAK,CAAC,CAAC;AACjD,KAAG;AACH,IACE,kBAAkB,CAAC,qBAA6B,EAAE,CAAc,EAAE,QAAgB;AAAI,QACpF,MAAM,OAAO,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAClD,QACI,IAAI,CAAC,cAAc,CAAC,qBAAqB,EAAE,WAAW,EAAE,OAAO,EAC3D,QAAQ,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC;AAC1C,QAAI,IAAI,CAAC,gCAAgC,CAAC,CAAC,CAAC,CAAC;AAC7C,KAAG;AACH,IACE,kBAAkB,CAAC,qBAA6B,EAAE,CAAc,EAAE,QAAgB;AAAI,QACpF,MAAM,OAAO,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAClD,QACI,IAAI,CAAC,cAAc,CAAC,qBAAqB,EAAE,WAAW,EAAE,OAAO,EAC3D,QAAQ,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC;AAC1C,QAAI,IAAI,CAAC,gCAAgC,CAAC,CAAC,CAAC,CAAC;AAC7C,KAAG;AACH,IACY,iBAAiB,CAAC,qBAA6B;AAAI,QAC3D,OAAO,cAAc,qBAAqB,EAAE,CAAC;AACjD,KAAG;AACH,IACE,WAAW;AAAK;AAC2B,QACzC,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE;AAC7D,YAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACpE,YAAM,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;AACrC,SAAK;AACL,KAAG;AACH,IACU,iBAAiB,CAAC,qBAA6B,EAAE,GAAW;AAAI,QACtE,MAAM,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,CAAC;AAC3E,QAAI,OAAO,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC/B,KAAG;AACH,IACU,gBAAgB,CAAC,sBAA8B;AAAI,QACzD,OAAO,yBAAyB,CAAC,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,CAAC;AAC7F,KAAG;AACH,IACU,cAAc,CAClB,qBAA6B,EAC7B,GAAW,EACX,KAAa,EACb,MAAM,GAAG,IAAI;AAAI,QACnB,MAAM,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,CAAC;AAC3E,QACI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;AACjC,YAAM,IAAI,MAAM,EAAE;AAClB,gBAAQ,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACnC,aAAO;AAAC,iBAAK;AACb,gBAAQ,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,aAAO;AACP,YAAM,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;AAChD,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,cAAc;AAAK,QACzB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;AAC7B,YAAM,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AACjE,YAAM,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;AACxE,YAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAC1D,SAAK;AACL,QACI,OAAO,IAAI,CAAC,aAAa,CAAC,KAAsB,CAAC;AACrD,KAAG;AACH,IACU,uBAAuB,CAAC,qBAA6B;AAAI,QAC/D,IAAI,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;AACvE,QAAI,IAAI,UAAU,KAAK,SAAS,EAAE;AAClC,YAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAC;AAC7C,YAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;AACpE,SAAK;AACL,QAAI,OAAO,UAAU,CAAC;AACtB,KAAG;AACH,IACU,aAAa,CAAC,qBAA6B;AACrD,QAAI,MAAM,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,CAAC;AAC3E,QAAI,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AACvD,QACI,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;AAC/D,QAAI,IAAI,KAAK,KAAK,SAAS,EAAE;AAC7B,YAAM,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;AAChC;AACQ,gBAAA,OAAO;AACf,aAAO;AACP,YACM,KAAK,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AACpC,YAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;AAC5D,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,CAAC,cAAc,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAC9C,SAAK;AACL,QACI,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,CAAC;AAC1E,QAAI,MAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC;AACjE,QACI,MAAM,QAAQ,GAAG,IAAI,cAAc,KAAK,eAAe,EAAE,CAAC;AAC9D,QAAI,MAAM,IAAI,GAAG,YAAY,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACpF,QACI,IAAI,CAAC,cAAc,EAAE,CAAC,UAAU,CAAC,GAAG,QAAQ,KAAK,IAAI,GAAG,EAAE,KAAM,CAAC,CAAC;AACtE,KAAG;AACH;sDAzIC,UAAU;4JACT;AAAC;AAAoD,YA5G/C,YAAY;AAAI,YAFN,wBAAwB,uBA2HnC,MAAM,SAAC,0BAA0B;AACjC,YA5HC,QAAQ;AAAI,4CA8Hb,MAAM,SAAC,QAAQ;AAAQ;;;;;;;;;kCAAE;AA0HhC;AACA,SAAS,wBAAwB,CAAC,QAAgB;AAAI;AAClD,IAAF,OAAO,MAAM,CAAC,MAAA,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,0CAAG,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC;AAED;AACA,SAAS,eAAe,CAAC,OAAoB;AAC7C;AACE;AACE,IAAF,OAAO,wBAAwB,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,WAAW,CAAC;AAC9E,CAAC;AAED;AACA;AACA;AACA;AACA,SAAS,yBAAyB,CAAC,SAA2B;AAAI;AAC9D,IAAF,OAAO,MAAM,CAAC,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CAAC,iBAAiB,CAAC,0CAAG,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC;AACD,MACa,2CAA2C,GAAa;AACrE,IAAE,OAAO,EAAE,cAAc;AACzB,IAAE,QAAQ,EAAE,8BAA8B;AAC1C,EAAE;AACF,MAAa,6BAA6B,GAAa;AACvD,IAAE,OAAO,EAAE,cAAc;AACzB,IAAE,QAAQ,EAAE,0BAA0B;AACtC;AACA;AC/RA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA,MAAM,SAAS,GAAe;AAC9B,IAAE,oBAAoB;AACtB,IAAE,wBAAwB;AAC1B,IAAE,0BAA0B;AAC5B,CAAC,CAAC;AACF,MACa,eAAe,GAAe;AAC3C,IAAE,GAAG,SAAS;AACd,IAAE,2CAA2C;AAC7C,EAAE;AACF,MAAa,cAAc,GAAe,CAAC,GAAG,SAAS,EAAE,6BAA6B;AACtF;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA,MAOa,eAAgB,SAAQ,YAAY;AACjD,IAAE,YACa,oBAA0C,EAC1C,UAAmC,EACzB,eAAyC,EACzC,MAAc,EACd,QAAoC,EACpC,KAAwB;AACjD,QAAI,KAAK,EAAE,CAAC;AACZ,QAPe,yBAAoB,GAApB,oBAAoB,CAAsB;AAAC,QAC3C,eAAU,GAAV,UAAU,CAAyB;AAAC,QAC1B,oBAAe,GAAf,eAAe,CAA0B;AAAC,QAC1C,WAAM,GAAN,MAAM,CAAQ;AAAC,QACf,aAAQ,GAAR,QAAQ,CAA4B;AAAC,QACrC,UAAK,GAAL,KAAK,CAAmB;AAAC,KAE/C;AACH;2CAjBC,SAAS,SAAC,kBACT,QAAQ,EAAE,gCAAgC,kBAC1C,SAAS,EAAE,sBACT,GAAG,eAAe,sBAClB,EAAC,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,eAAe,EAAC,mBACtD,eACF;;;;kDACI;AAAC;AAAyC,YAfvC,oBAAoB;AAAI,YAJb,UAAU;AAAI,YAKzB,wBAAwB;AAAI,YALL,MAAM;AAAI,YAIX,0BAA0B;AAAI,YAHpD,QAAQ;AAAG;;;;;;;;;;yOAAE;AAAC;ACTtB;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA,MAOa,mBAAoB,SAAQ,YAAY;AACrD,IAAE,YACa,oBAA0C,EAC1C,UAAmC,EACzB,eAAyC,EACzC,MAAc,EACd,QAAoC,EACpC,KAAwB;AACjD,QAAI,KAAK,EAAE,CAAC;AACZ,QAPe,yBAAoB,GAApB,oBAAoB,CAAsB;AAAC,QAC3C,eAAU,GAAV,UAAU,CAAyB;AAAC,QAC1B,oBAAe,GAAf,eAAe,CAA0B;AAAC,QAC1C,WAAM,GAAN,MAAM,CAAQ;AAAC,QACf,aAAQ,GAAR,QAAQ,CAA4B;AAAC,QACrC,UAAK,GAAL,KAAK,CAAmB;AAAC,KAE/C;AACH;+CAjBC,SAAS,SAAC,kBACT,QAAQ,EAAE,yBAAyB,kBACnC,SAAS,EAAE,sBACT,GAAG,cAAc,sBACjB,EAAC,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,mBAAmB,EAAC,mBAC1D,eACF;;;;kDACI;AAAC;AAA6C,YAf3C,oBAAoB;AAAI,YAJb,UAAU;AAAI,YAKzB,wBAAwB;AAAI,YALL,MAAM;AAAI,YAIX,0BAA0B;AAAI,YAHpD,QAAQ;AAAG;;;;;;;;;;yOAAE;AAAC;ACTtB;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA,MAOa,6BAA8B,SAAQ,YAAY;AAC/D,IAAE,YACa,oBAA0C,EAC1C,UAAmC,EACzB,eAAyC,EACzC,MAAc,EACd,QAAoC,EACpC,KAAwB;AACjD,QAAI,KAAK,EAAE,CAAC;AACZ,QAPe,yBAAoB,GAApB,oBAAoB,CAAsB;AAAC,QAC3C,eAAU,GAAV,UAAU,CAAyB;AAAC,QAC1B,oBAAe,GAAf,eAAe,CAA0B;AAAC,QAC1C,WAAM,GAAN,MAAM,CAAQ;AAAC,QACf,aAAQ,GAAR,QAAQ,CAA4B;AAAC,QACrC,UAAK,GAAL,KAAK,CAAmB;AAAC,KAE/C;AACH;yDAjBC,SAAS,SAAC,kBACT,QAAQ,EAAE,kBAAkB,kBAC5B,SAAS,EAAE,sBACT,GAAG,eAAe,sBAClB,EAAC,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,6BAA6B,EAAC,mBACpE,eACF;;;;kDACI;AAAC;AAAuD,YAfrD,oBAAoB;AAAI,YAJb,UAAU;AAAI,YAKzB,wBAAwB;AAAI,YALL,MAAM;AAAI,YAIX,0BAA0B;AAAI,YAHpD,QAAQ;AAAG;;;;;;;;;;yOAAE;AAAC;ACTtB;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA,MAOa,iCAAkC,SAAQ,YAAY;AACnE,IAAE,YACa,oBAA0C,EAC1C,UAAmC,EACzB,eAAyC,EACzC,MAAc,EACd,QAAoC,EACpC,KAAwB;AACjD,QAAI,KAAK,EAAE,CAAC;AACZ,QAPe,yBAAoB,GAApB,oBAAoB,CAAsB;AAAC,QAC3C,eAAU,GAAV,UAAU,CAAyB;AAAC,QAC1B,oBAAe,GAAf,eAAe,CAA0B;AAAC,QAC1C,WAAM,GAAN,MAAM,CAAQ;AAAC,QACf,aAAQ,GAAR,QAAQ,CAA4B;AAAC,QACrC,UAAK,GAAL,KAAK,CAAmB;AAAC,KAE/C;AACH;6DAjBC,SAAS,SAAC,kBACT,QAAQ,EAAE,WAAW,kBACrB,SAAS,EAAE,sBACT,GAAG,cAAc,sBACjB,EAAC,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,iCAAiC,EAAC,mBACxE,eACF;;;;kDACI;AAAC;AAA2D,YAfzD,oBAAoB;AAAI,YAJb,UAAU;AAAI,YAKzB,wBAAwB;AAAI,YALL,MAAM;AAAI,YAIX,0BAA0B;AAAI,YAHpD,QAAQ;AAAG;;;;;;;;;;yOAAE;AAAC;ACTtB;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA,MAIa,mCAAmC;AAAG;+DAJlD,QAAQ,SAAC,kBACR,YAAY,EAAE,CAAC,6BAA6B,EAAE;gBAAiC,CAAC,kBAChF,OAAO,EAAE,CAAC,6BAA6B,EAAE,iCAAiC,CAAC,eAC5E;;;;;;;;;0SACI;AAEL;AACA;AACA;AACA;AACA,MAIa,qBAAqB;AAAG;iDAJpC,QAAQ,SAAC,kBACR,YAAY,EAAE,CAAC,eAAe,EAAE;gBAAmB,CAAC,kBACpD,OAAO,EAAE,CAAC,eAAe,EAAE,mBAAmB,CAAC,eAChD;;;;;;;;;oOACI;AAAC;ACrCN;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA,MACsB,eAAe;AACrC;2CAFC,UAAU;;;;0BACT;AAAC;ACdH;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA,MAAa,SAAS;AACtB,IAAE,YACa,MAAkB,EAClB,UAAsB,EACtB,UAAkB,EAClB,UAAkB;AAAI,QAHtB,WAAM,GAAN,MAAM,CAAY;AAAC,QACnB,eAAU,GAAV,UAAU,CAAY;AAAC,QACvB,eAAU,GAAV,UAAU,CAAQ;AAAC,QACnB,eAAU,GAAV,UAAU,CAAQ;AAAC,KAAK;AACvC;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AA8BA,MAAM,oBAAoB,GAAG,oCAAoC,CAAC;AAElE;AACA;AACA;AACA;AACA,MACsB,SAAS;AAAG,IADlC;AACG,QAES,uBAAkB,GAAW,CAAC,CAAC;AAC3C,QAAY,uBAAkB,GAAW,MAAM,CAAC,gBAAgB,CAAC;AACjE,QAGqB,cAAS,GAAG,IAAI,OAAO,EAAQ,CAAC;AACrD,QAgBU,qBAAgB,GAAG,KAAK,CAAC;AACnC,KA8MC;AACD;AAAiE,IA7M/D,IAAI,UAAU;AAAK,QACjB,OAAO,IAAI,CAAC,kBAAkB,CAAC;AACnC,KAAG;AACH,IAAE,IAAI,UAAU,CAAC,KAAa;AAC9B,QAAI,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;AACpC,QACI,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;AACnC,QAAI,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,IAAI,IAAI,CAAC,gBAAgB,EAAE;AAChE,YAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC9B,SAAK;AACL,KAAG;AACH;AAEC,IAAC,IAAI,UAAU;AAAK,QACjB,OAAO,IAAI,CAAC,kBAAkB,CAAC;AACnC,KAAG;AACH,IAAE,IAAI,UAAU,CAAC,KAAa;AAC9B,QAAI,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;AACpC,QACI,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;AACnC,QAAI,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,IAAI,IAAI,CAAC,gBAAgB,EAAE;AAChE,YAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC9B,SAAK;AACL,KAAG;AACH,IACE,eAAe;AACjB,QAAI,IAAI,CAAC,wBAAwB,EAAE,CAAC;AACpC,QAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;AAClC,QAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;AAC/B,QACI,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;AACpC,YAAM,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;AACnC,YAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC9B,YAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC9B,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,WAAW;AAAK,QACd,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;AAC1B,QAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;AAC9B,QACI,IAAI,IAAI,CAAC,YAAY,EAAE;AAC3B,YAAM,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AACpE,SAAK;AACL,QACI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,YAAM,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;AAChC,SAAK;AACL,KAAG;AACH,IAKU,uBAAuB;AAAK;AACmC;AACF;AAEvE,QACI,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,KAAK,KAAK,CAAC;AACtD,QAAI,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;AACpD,aAAS,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC;AAC5D,aAAS,sBAAsB,CAAC,KAAK,CAAC;AACtC,aAAS,iBAAiB,CAAC,KAAK,CAAC;AACjC,aAAS,QAAQ,CAAC,KAAK,CAAC;AACxB,aAAS,kBAAkB,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1C,aAAS,aAAa,CAAC,CAAC;AACxB,gBAAU,OAAO,EAAE,KAAK,GAAG,OAAO,GAAG,KAAK;AAC1C,gBAAU,OAAO,EAAE,KAAK;AACxB,gBAAU,QAAQ,EAAE,QAAQ;AAC5B,gBAAU,QAAQ,EAAE,KAAK;AACzB,aAAS,CAAC,CAAC,CAAC;AACZ,QACI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AAC/B;AACM,YAAA,SAAS,EAAE,KAAK;AACtB,YAAM,mBAAmB,EAAE,IAAI;AAC/B,YAAM,gBAAgB;AACtB,YAAM,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE;AAChE,YAAM,KAAK,EAAE,MAAM;AACnB,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,wBAAwB;AAAK,QACnC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC;AACnD,QAAI,MAAM,kBAAkB,GAAG,SAAS,CAAU,IAAI,CAAC,SAAS,CAAC,CAAC;AAClE,QAEI,IAAI,CAAC,eAAe,CAAC,gCAAgC,CAAC,QAAQ,CAAC,OAAO,EAAE,mBAAmB,CAAE,CAAC;AAClG,aAAS,IAAI,CAAC,kBAAkB,CAAC,CAAC,SAAS,CAAC,WAAW;AACvD,YAAM,IAAI,WAAW,EAAE;AACvB,gBAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AAC9B,oBAAU,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;AAC3D,iBAAS;AACT,gBACQ,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAClC,aAAO;AAAC,iBAAK,IAAI,IAAI,CAAC,UAAU,EAAE;AAClC;AACQ,gBAAA,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;AACjC,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,sBAAsB;AAChC,QAAI,MAAM,kBAAkB,GAAG,SAAS,CAAmB,IAAI,CAAC,SAAS,CAAC,CAAC;AAC3E,QACI,KAAK,CACD,IAAI,CAAC,cAAc,CAAC,cAAc,EAClC,IAAI,CAAC,cAAc,CAAC,aAAa,CACpC,CAAC,IAAI,CACF,kBAAkB,EAClB,MAAM,CAAC,UAAU,IAAI,UAAU,CAAC,QAAQ,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CACpE,CAAC,SAAS,CAAC,CAAC,EAAC,IAAI,EAAE,YAAY,EAAE,mBAAmB,EAAC;AAC1D,YAAM,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;AACzE,YAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;AAC1C,YACM,IAAI,mBAAmB,EAAE;AAC/B,gBAAQ,IAAI,CAAC,wBAAwB,EAAE,CAAC;AACxC,aAAO;AACP,SAAK,CAAC,CAAC;AACP,QACI,KAAK,CACD,IAAI,CAAC,cAAc,CAAC,cAAc,EAClC,IAAI,CAAC,cAAc,CAAC,eAAe,CACtC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,SAAS,CAAC,UAAU;AACnD,YAAM,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;AAC3C,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,wBAAwB;AAAK,QACnC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;AACpB,YAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC;AAC/C,gBAAQ,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI;AACrC,gBAAQ,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,WAAW;AACxD,aAAO,CAAC,CAAC;AACT,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,mBAAmB,CAAC,UAA4B;AAAI,QAC1D,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,SAAS,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;AAC1E,QACI,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE;AAC1D,YAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;AACxC,YAAM,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;AACvC,YACM,IAAI,UAAU,CAAC,QAAQ,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;AACvD,gBAAQ,IAAI,CAAC,YAAa,CAAC,KAAK,EAAE,CAAC;AACnC,aAAO;AACP,SAAK;AACL,KAAG;AACH,IACU,mBAAmB;AAAK,QAC9B,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC;AACrC,YAAM,MAAM,EAAE,IAAI,CAAC,QAAQ;AAC3B,YAAM,SAAS,EAAE,CAAC;AAClB,oBAAQ,OAAO,EAAE,SAAS;AAC1B,oBAAQ,QAAQ,EAAE,IAAI,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAW,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;AACpG,iBAAO,CAAC;AACR,SAAK,CAAC,CAAC;AACP,QACI,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,6BAA6B,EAAE,EAC3D,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;AACzC,KAAG;AACH,IACU,kBAAkB;AAAK,QAC7B,IAAI,CAAC,0BAA0B,EAAE,CAAC;AACtC,QAAI,IAAI,CAAC,UAAW,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;AACxD;AAEG,QAAC,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;AAC1C,KAAG;AACH,IACU,0BAA0B;AACpC,QAAI,IAAI,CAAC,UAAW,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,YAAY,EAAC,CAAC,CAAC;AACvF,KAAG;AACH,IACU,UAAU,CAAC,YAAoB,EAAE,YAAqB;AAAI,QAChE,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AAC9F,QACI,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,EACnE,IAAI,CAAC,UAAU,CAAC,aAAc,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;AACnE,KAAG;AACH,IACU,gBAAgB;AAAK,QAC3B,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,EACtE,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AACxD,KAAG;AACH,IACU,gBAAgB;AAAK,QAC3B,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,EACtE,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AACxD,KAAG;AACH,IACU,mBAAmB;AAAK,QAC9B,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;AACjC,YAAM,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC7D,YAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,CAAC,CAAC;AACrC,YAAM,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,2BAA2B,EAAE,CAAC;AACvE;AAGI,YAAE,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AACpE,SAAK,CAAC,CAAC;AACP,KAAG;AACH;qCAxOC,SAAS;;;;gDACR;AAAC;AC3CH;AACA;AACA;AACA;AACA;AACA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA,MACsB,mBAAmB;AAAG,IAD5C;AACG,QACkB,cAAS,GAAG,IAAI,OAAO,EAAQ,CAAC;AACrD,KA+JC;AACD,IArJE,eAAe;AACjB,QAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACjC,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;AAC1B,QAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;AAC9B,KAAG;AACH,IACU,qBAAqB;AAC/B,QAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;AAClC,YAAM,SAAS,CAAa,IAAI,CAAC,UAAU,CAAC,aAAc,EAAE,YAAY,CAAC,CAAC,IAAI,CACpE,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAAc,CAAC,EAC3C,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAC5B,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7E,YACM,SAAS,CAAa,IAAI,CAAC,UAAU,CAAC,aAAc,EAAE,YAAY,CAAC,CAAC,IAAI,CACpE,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,aAAa;AAC1C,gBAAc,QAAQ,CAAC,KAAK,CAAC,aAAwB,EAAE,oBAAoB,CAAC,CAAC,EACnE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAC5B,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7E,YACM,SAAS,CAAa,IAAI,CAAC,UAAU,CAAC,aAAc,EAAE,WAAW,CAAC;AACxE,iBAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc;AACnE,gBAAQ,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;AAC1C,aAAO,CAAC,CAAC;AACT,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,YAAY,CAAC,cAA0B;AACjD;AACI,QAAA,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;AACrC,YAAM,OAAO;AACb,SAAK;AACL,QACI,MAAM,OAAO,GAAG,SAAS,CAAa,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AACpE,QAAI,MAAM,SAAS,GAAG,SAAS,CAAa,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AACxE,QAAI,MAAM,MAAM,GAAG,SAAS,CAAgB,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC;AACnE,aAAS,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC;AACzD,QACI,MAAM,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC;AAC1C,QACI,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;AAC/C,QAAI,IAAI,aAAa,GAAG,CAAC,CAAC;AAC1B,QAAI,IAAI,YAAY,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC/C,QAAI,IAAI,IAAI,GAAG,WAAW,CAAC;AAC3B,QAAI,IAAI,QAAQ,GAAG,CAAC,CAAC;AACrB,QACI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;AAClC,QACI,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAC,OAAO,EAAC;AAC/E,YAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;AACtC,gBAAQ,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,OAAO,KAAK,MAAM,CAAC,CAAC;AAC1D,aAAO,CAAC,CAAC;AACT,SAAK,CAAC,CAAC;AACP,QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AACrE,YAAM,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;AAC3C,SAAK,CAAC,CAAC;AACP,QACI,SAAS,CAAC,IAAI,CACV,GAAG,CAAC,CAAC,EAAC,OAAO,EAAC,KAAK,OAAO,CAAC,EAC3B,SAAS,CAAC,MAAM,CAAC,EACjB,oBAAoB,EAAE,EACtB,QAAQ,EAAE,EACV,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CACpD,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC;AAC/B,YAAM,IAAI,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC;AACjC;AAEK;AACM,YAAL,IAAI,QAAQ,KAAK,CAAC,EAAE;AAC1B,gBAAQ,IAAI,QAAQ,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC,IAAI,QAAQ,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC,EAAE;AACtE,oBAAU,QAAQ,IAAI,MAAM,CAAC;AAC7B,oBAAU,OAAO;AACjB,iBAAS;AAAC,qBAAK;AACf,oBAAU,MAAM,iBAAiB,GAAG,QAAQ,GAAG,MAAM,CAAC;AACtD,oBAAU,QAAQ,GAAG,QAAQ,GAAG,CAAC;AACjC,wBAAc,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;AAC9E,oBAAU,MAAM,GAAG,iBAAiB,GAAG,QAAQ,CAAC;AAChD,oBACU,IAAI,MAAM,KAAK,CAAC,EAAE;AAC5B,wBAAY,OAAO;AACnB,qBAAW;AACX,iBAAS;AACT,aAAO;AACP,YACM,IAAI,eAAe,GAAW,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;AAC9E,YAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CACtB,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AAC9F,YACM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC;AAC7C,gBAAQ,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI;AACrC,gBAAQ,IAAI,EAAE,eAAe;AAC7B,gBAAQ,YAAY,EAAE,IAAI;AAC1B,gBAAQ,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS;AACzE,aAAO,CAAC,CAAC;AACT,YACM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;AACtC,gBAAQ,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;AACrD,gBAAQ,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACxD,gBAAQ,MAAM,kBAAkB,GAAG,eAAe,GAAG,YAAY,CAAC;AAClE,gBAAQ,MAAM,gBAAgB,GAAG,aAAa,GAAG,IAAI,CAAC;AACtD,gBAAQ,IAAI,GAAG,aAAa,CAAC;AAC7B,gBAAQ,YAAY,GAAG,eAAe,CAAC;AACvC,gBACQ,QAAQ,IAAI,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,CAAC;AACpF,gBAAQ,aAAa,IAAI,kBAAkB,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,gBAAgB,GAAG,CAAC,CAAC,CAAC;AACrF,gBACQ,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;AACjD,aAAO,CAAC,CAAC;AACT,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACY,kBAAkB,CAAC,MAAe;AAAI,QAC9C,IAAI,CAAC,eAAe,CAAC,0BAA0B,CAAC,IAAI,CAChD,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAAc,GAAG,IAAI,CAAC,CAAC;AAC9D,KAAG;AACH,IACU,eAAe;AAAK,QAC1B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAAc,CAAC,WAAW,CAAC;AAC5D,KAAG;AACH,IACU,gBAAgB;AAAK,QAC3B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAAc,CAAC,UAAU,CAAC;AAC3D,KAAG;AACH,IACU,oBAAoB,CAAC,MAAc;AAAI,QAC7C,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS;AAC5D,YAAQ,cAAc,mBAAmB,CAAC,MAAM,CAAC,GAAG,CAAC;AACrD,KAAG;AACH,IACU,MAAM;AAAK,QACjB,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,KAAK,KAAK,CAAC;AAC/C,KAAG;AACH,IACU,kBAAkB,CAAC,IAAY,EAAE,qBAAqB,GAAG,KAAK;AAAI,QACxE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;AACnC,QACI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;AACpB,YAAM,MAAM,WAAW,GAAG,EAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAC,CAAC;AAChE,YAAM,IAAI,qBAAqB,EAAE;AACjC,gBAAQ,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC9D,aAAO;AAAC,iBAAK;AACb,gBAAQ,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC7D,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG;AACH;+CAlKC,SAAS;;;;gDACR;AAAC;ACtCH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AAE+mB","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO: Figure out how to remove `mat-` classes from the CDK part of the\n// column resize implementation.\n\nexport const HEADER_CELL_SELECTOR = '.cdk-header-cell, .mat-header-cell';\n\nexport const HEADER_ROW_SELECTOR = '.cdk-header-row, .mat-header-row';\n\nexport const RESIZE_OVERLAY_SELECTOR = '.mat-column-resize-overlay-thumb';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterViewInit, Directive, ElementRef, NgZone, OnDestroy} from '@angular/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {filter, map, mapTo, pairwise, startWith, take, takeUntil} from 'rxjs/operators';\n\nimport {_closest, _matches} from '@angular/cdk-experimental/popover-edit';\n\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from './column-resize-notifier';\nimport {HEADER_CELL_SELECTOR, RESIZE_OVERLAY_SELECTOR} from './selectors';\nimport {HeaderRowEventDispatcher} from './event-dispatcher';\n\nconst HOVER_OR_ACTIVE_CLASS = 'cdk-column-resize-hover-or-active';\nconst WITH_RESIZED_COLUMN_CLASS = 'cdk-column-resize-with-resized-column';\n\nlet nextId = 0;\n\n/**\n * Base class for ColumnResize directives which attach to mat-table elements to\n * provide common events and services for column resizing.\n */\n@Directive()\nexport abstract class ColumnResize implements AfterViewInit, OnDestroy {\n  protected readonly destroyed = new Subject<void>();\n\n  /* Publicly accessible interface for triggering and being notified of resizes. */\n  abstract readonly columnResizeNotifier: ColumnResizeNotifier;\n\n  /* ElementRef that this directive is attached to. Exposed For use by column-level directives */\n  abstract readonly elementRef: ElementRef<HTMLElement>;\n\n  protected abstract readonly eventDispatcher: HeaderRowEventDispatcher;\n  protected abstract readonly ngZone: NgZone;\n  protected abstract readonly notifier: ColumnResizeNotifierSource;\n\n  /** Unique ID for this table instance. */\n  protected readonly selectorId = `${++nextId}`;\n\n  /** The id attribute of the table, if specified. */\n  id?: string;\n\n  ngAfterViewInit() {\n    this.elementRef.nativeElement!.classList.add(this.getUniqueCssClass());\n\n    this._listenForRowHoverEvents();\n    this._listenForResizeActivity();\n    this._listenForHoverActivity();\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n\n  /** Gets the unique CSS class name for this table instance. */\n  getUniqueCssClass() {\n    return `cdk-column-resize-${this.selectorId}`;\n  }\n\n  /** Called when a column in the table is resized. Applies a css class to the table element. */\n  setResized() {\n    this.elementRef.nativeElement!.classList.add(WITH_RESIZED_COLUMN_CLASS);\n  }\n\n  private _listenForRowHoverEvents() {\n    this.ngZone.runOutsideAngular(() => {\n      const element = this.elementRef.nativeElement!;\n\n      fromEvent<MouseEvent>(element, 'mouseover').pipe(\n          map(event => _closest(event.target, HEADER_CELL_SELECTOR)),\n          takeUntil(this.destroyed),\n          ).subscribe(this.eventDispatcher.headerCellHovered);\n      fromEvent<MouseEvent>(element, 'mouseleave').pipe(\n          filter(event => !!event.relatedTarget &&\n              !_matches(event.relatedTarget as Element, RESIZE_OVERLAY_SELECTOR)),\n          mapTo(null),\n          takeUntil(this.destroyed),\n          ).subscribe(this.eventDispatcher.headerCellHovered);\n    });\n  }\n\n  private _listenForResizeActivity() {\n    merge(\n        this.eventDispatcher.overlayHandleActiveForCell.pipe(mapTo(undefined)),\n        this.notifier.triggerResize.pipe(mapTo(undefined)),\n        this.notifier.resizeCompleted.pipe(mapTo(undefined))\n    ).pipe(\n      take(1),\n      takeUntil(this.destroyed),\n    ).subscribe(() => {\n      this.setResized();\n    });\n  }\n\n  private _listenForHoverActivity() {\n    this.eventDispatcher.headerRowHoveredOrActiveDistinct.pipe(\n        startWith(null),\n        pairwise(),\n        takeUntil(this.destroyed),\n    ).subscribe(([previousRow, hoveredRow]) => {\n      if (hoveredRow) {\n        hoveredRow.classList.add(HOVER_OR_ACTIVE_CLASS);\n      }\n      if (previousRow) {\n        previousRow.classList.remove(HOVER_OR_ACTIVE_CLASS);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** Indicates the width of a column. */\nexport interface ColumnSize {\n  /** The ID/name of the column, as defined in CdkColumnDef. */\n  readonly columnId: string;\n\n  /** The width in pixels of the column. */\n  readonly size: number;\n\n  /** The width in pixels of the column prior to this update, if known. */\n  readonly previousSize?: number;\n}\n\n/** Interface describing column size changes. */\nexport interface ColumnSizeAction extends ColumnSize {\n  /**\n   * Whether the resize action should be applied instantaneously. False for events triggered during\n   * a UI-triggered resize (such as with the mouse) until the mouse button is released. True\n   * for all programmatically triggered resizes.\n   */\n  readonly completeImmediately?: boolean;\n\n  /**\n   * Whether the resize action is being applied to a sticky/stickyEnd column.\n   */\n  readonly isStickyColumn?: boolean;\n}\n\n/**\n * Originating source of column resize events within a table.\n * @docs-private\n */\n@Injectable()\nexport class ColumnResizeNotifierSource {\n  /** Emits when an in-progress resize is canceled. */\n  readonly resizeCanceled = new Subject<ColumnSizeAction>();\n\n  /** Emits when a resize is applied. */\n  readonly resizeCompleted = new Subject<ColumnSize>();\n\n  /** Triggers a resize action. */\n  readonly triggerResize = new Subject<ColumnSizeAction>();\n}\n\n/** Service for triggering column resizes imperatively or being notified of them. */\n@Injectable()\nexport class ColumnResizeNotifier {\n  /** Emits whenever a column is resized. */\n  readonly resizeCompleted: Observable<ColumnSize> = this._source.resizeCompleted;\n\n  constructor(private readonly _source: ColumnResizeNotifierSource) {}\n\n  /** Instantly resizes the specified column. */\n  resize(columnId: string, size: number): void {\n    this._source.triggerResize.next(\n        {columnId, size, completeImmediately: true, isStickyColumn: true});\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone} from '@angular/core';\nimport {combineLatest, MonoTypeOperatorFunction, Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged, map, share, skip, startWith} from 'rxjs/operators';\n\nimport {_closest} from '@angular/cdk-experimental/popover-edit';\n\nimport {HEADER_ROW_SELECTOR} from './selectors';\n\n/** Coordinates events between the column resize directives. */\n@Injectable()\nexport class HeaderRowEventDispatcher {\n  /**\n   * Emits the currently hovered header cell or null when no header cells are hovered.\n   * Exposed publicly for events to feed in, but subscribers should use headerCellHoveredDistinct,\n   * defined below.\n   */\n  readonly headerCellHovered = new Subject<Element|null>();\n\n  /**\n   * Emits the header cell for which a user-triggered resize is active or null\n   * when no resize is in progress.\n   */\n  readonly overlayHandleActiveForCell = new Subject<Element|null>();\n\n  constructor(private readonly _ngZone: NgZone) {}\n\n  /** Distinct and shared version of headerCellHovered. */\n  readonly headerCellHoveredDistinct = this.headerCellHovered.pipe(\n      distinctUntilChanged(),\n      share(),\n  );\n\n  /**\n   * Emits the header that is currently hovered or hosting an active resize event (with active\n   * taking precedence).\n   */\n  readonly headerRowHoveredOrActiveDistinct = combineLatest([\n      this.headerCellHoveredDistinct.pipe(\n          map(cell => _closest(cell, HEADER_ROW_SELECTOR)),\n          startWith(null),\n          distinctUntilChanged(),\n       ),\n      this.overlayHandleActiveForCell.pipe(\n          map(cell => _closest(cell, HEADER_ROW_SELECTOR)),\n          startWith(null),\n          distinctUntilChanged(),\n      ),\n  ]).pipe(\n      skip(1), // Ignore initial [null, null] emission.\n      map(([hovered, active]) => active || hovered),\n      distinctUntilChanged(),\n      share(),\n  );\n\n  private readonly _headerRowHoveredOrActiveDistinctReenterZone =\n      this.headerRowHoveredOrActiveDistinct.pipe(\n          this._enterZone(),\n          share(),\n      );\n\n  // Optimization: Share row events observable with subsequent callers.\n  // At startup, calls will be sequential by row (and typically there's only one).\n  private _lastSeenRow: Element|null = null;\n  private _lastSeenRowHover: Observable<boolean>|null = null;\n\n  /**\n   * Emits whether the specified row should show its overlay controls.\n   * Emission occurs within the NgZone.\n   */\n  resizeOverlayVisibleForHeaderRow(row: Element): Observable<boolean> {\n    if (row !== this._lastSeenRow) {\n      this._lastSeenRow = row;\n      this._lastSeenRowHover = this._headerRowHoveredOrActiveDistinctReenterZone.pipe(\n        map(hoveredRow => hoveredRow === row),\n        distinctUntilChanged(),\n        share(),\n      );\n    }\n\n    return this._lastSeenRowHover!;\n  }\n\n  private _enterZone<T>(): MonoTypeOperatorFunction<T> {\n    return (source: Observable<T>) =>\n        new Observable<T>((observer) => source.subscribe({\n          next: (value) => this._ngZone.run(() => observer.next(value)),\n          error: (err) => observer.error(err),\n          complete: () => observer.complete()\n        }));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, OnDestroy, Provider} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\nimport {CdkTable, _CoalescedStyleScheduler, _COALESCED_STYLE_SCHEDULER} from '@angular/cdk/table';\n\nimport {ColumnResize} from './column-resize';\n\n/**\n * Provides an implementation for resizing a column.\n * The details of how resizing works for tables for flex mat-tables are quite different.\n */\n@Injectable()\nexport abstract class ResizeStrategy {\n  protected abstract readonly columnResize: ColumnResize;\n  protected abstract readonly styleScheduler: _CoalescedStyleScheduler;\n  protected abstract readonly table: CdkTable<unknown>;\n\n  private _pendingResizeDelta: number|null = null;\n\n  /** Updates the width of the specified column. */\n  abstract applyColumnSize(\n      cssFriendlyColumnName: string,\n      columnHeader: HTMLElement,\n      sizeInPx: number,\n      previousSizeInPx?: number): void;\n\n  /** Applies a minimum width to the specified column, updating its current width as needed. */\n  abstract applyMinColumnSize(\n      cssFriendlyColumnName: string,\n      columnHeader: HTMLElement,\n      minSizeInPx: number): void;\n\n  /** Applies a maximum width to the specified column, updating its current width as needed. */\n  abstract applyMaxColumnSize(\n      cssFriendlyColumnName: string,\n      columnHeader: HTMLElement,\n      minSizeInPx: number): void;\n\n  /** Adjusts the width of the table element by the specified delta. */\n  protected updateTableWidthAndStickyColumns(delta: number): void {\n    if (this._pendingResizeDelta === null) {\n      const tableElement = this.columnResize.elementRef.nativeElement;\n      const tableWidth = getElementWidth(tableElement);\n\n      this.styleScheduler.schedule(() => {\n        tableElement.style.width = coerceCssPixelValue(tableWidth + this._pendingResizeDelta!);\n\n        this._pendingResizeDelta = null;\n      });\n\n      this.styleScheduler.scheduleEnd(() => {\n        this.table.updateStickyColumnStyles();\n      });\n    }\n\n    this._pendingResizeDelta = (this._pendingResizeDelta ?? 0) + delta;\n  }\n}\n\n/**\n * The optimially performing resize strategy for &lt;table&gt; elements with table-layout: fixed.\n * Tested against and outperformed:\n *   CSS selector\n *   CSS selector w/ CSS variable\n *   Updating all cell nodes\n */\n@Injectable()\nexport class TableLayoutFixedResizeStrategy extends ResizeStrategy {\n  constructor(\n      protected readonly columnResize: ColumnResize,\n      @Inject(_COALESCED_STYLE_SCHEDULER)\n          protected readonly styleScheduler: _CoalescedStyleScheduler,\n      protected readonly table: CdkTable<unknown>) {\n    super();\n  }\n\n  applyColumnSize(_: string, columnHeader: HTMLElement, sizeInPx: number,\n      previousSizeInPx?: number): void {\n    const delta = sizeInPx - (previousSizeInPx ?? getElementWidth(columnHeader));\n\n    if (delta === 0) {\n      return;\n    }\n\n    this.styleScheduler.schedule(() => {\n      columnHeader.style.width = coerceCssPixelValue(sizeInPx);\n    });\n\n    this.updateTableWidthAndStickyColumns(delta);\n  }\n\n  applyMinColumnSize(_: string, columnHeader: HTMLElement, sizeInPx: number): void {\n    const currentWidth = getElementWidth(columnHeader);\n    const newWidth = Math.max(currentWidth, sizeInPx);\n\n    this.applyColumnSize(_, columnHeader, newWidth, currentWidth);\n  }\n\n  applyMaxColumnSize(_: string, columnHeader: HTMLElement, sizeInPx: number): void {\n    const currentWidth = getElementWidth(columnHeader);\n    const newWidth = Math.min(currentWidth, sizeInPx);\n\n    this.applyColumnSize(_, columnHeader, newWidth, currentWidth);\n  }\n}\n\n/**\n * The optimally performing resize strategy for flex mat-tables.\n * Tested against and outperformed:\n *   CSS selector w/ CSS variable\n *   Updating all mat-cell nodes\n */\n@Injectable()\nexport class CdkFlexTableResizeStrategy extends ResizeStrategy implements OnDestroy {\n  private readonly _document: Document;\n  private readonly _columnIndexes = new Map<string, number>();\n  private readonly _columnProperties = new Map<string, Map<string, string>>();\n\n  private _styleElement?: HTMLStyleElement;\n  private _indexSequence = 0;\n\n  protected readonly defaultMinSize = 0;\n  protected readonly defaultMaxSize = Number.MAX_SAFE_INTEGER;\n\n  constructor(\n      protected readonly columnResize: ColumnResize,\n      @Inject(_COALESCED_STYLE_SCHEDULER)\n          protected readonly styleScheduler: _CoalescedStyleScheduler,\n      protected readonly table: CdkTable<unknown>,\n      @Inject(DOCUMENT) document: any) {\n    super();\n    this._document = document;\n  }\n\n  applyColumnSize(cssFriendlyColumnName: string, columnHeader: HTMLElement,\n      sizeInPx: number, previousSizeInPx?: number): void {\n    // Optimization: Check applied width first as we probably set it already before reading\n    // offsetWidth which triggers layout.\n    const delta = sizeInPx - (previousSizeInPx ??\n        (this._getAppliedWidth(cssFriendlyColumnName) || columnHeader.offsetWidth));\n\n    if (delta === 0) {\n      return;\n    }\n\n    const cssSize = coerceCssPixelValue(sizeInPx);\n\n    this._applyProperty(cssFriendlyColumnName, 'flex', `0 0.01 ${cssSize}`);\n    this.updateTableWidthAndStickyColumns(delta);\n  }\n\n  applyMinColumnSize(cssFriendlyColumnName: string, _: HTMLElement, sizeInPx: number): void {\n    const cssSize = coerceCssPixelValue(sizeInPx);\n\n    this._applyProperty(cssFriendlyColumnName, 'min-width', cssSize,\n        sizeInPx !== this.defaultMinSize);\n    this.updateTableWidthAndStickyColumns(0);\n  }\n\n  applyMaxColumnSize(cssFriendlyColumnName: string, _: HTMLElement, sizeInPx: number): void {\n    const cssSize = coerceCssPixelValue(sizeInPx);\n\n    this._applyProperty(cssFriendlyColumnName, 'max-width', cssSize,\n        sizeInPx !== this.defaultMaxSize);\n    this.updateTableWidthAndStickyColumns(0);\n  }\n\n  protected getColumnCssClass(cssFriendlyColumnName: string): string {\n    return `cdk-column-${cssFriendlyColumnName}`;\n  }\n\n  ngOnDestroy(): void {\n    // TODO: Use remove() once we're off IE11.\n    if (this._styleElement && this._styleElement.parentNode) {\n      this._styleElement.parentNode.removeChild(this._styleElement);\n      this._styleElement = undefined;\n    }\n  }\n\n  private _getPropertyValue(cssFriendlyColumnName: string, key: string): string|undefined {\n    const properties = this._getColumnPropertiesMap(cssFriendlyColumnName);\n    return properties.get(key);\n  }\n\n  private _getAppliedWidth(cssFriendslyColumnName: string): number {\n    return coercePixelsFromFlexValue(this._getPropertyValue(cssFriendslyColumnName, 'flex'));\n  }\n\n  private _applyProperty(\n      cssFriendlyColumnName: string,\n      key: string,\n      value: string,\n      enable = true): void {\n    const properties = this._getColumnPropertiesMap(cssFriendlyColumnName);\n\n    this.styleScheduler.schedule(() => {\n      if (enable) {\n        properties.set(key, value);\n      } else {\n        properties.delete(key);\n      }\n      this._applySizeCss(cssFriendlyColumnName);\n    });\n  }\n\n  private _getStyleSheet(): CSSStyleSheet {\n    if (!this._styleElement) {\n      this._styleElement = this._document.createElement('style');\n      this._styleElement.appendChild(this._document.createTextNode(''));\n      this._document.head.appendChild(this._styleElement);\n    }\n\n    return this._styleElement.sheet as CSSStyleSheet;\n  }\n\n  private _getColumnPropertiesMap(cssFriendlyColumnName: string): Map<string, string> {\n    let properties = this._columnProperties.get(cssFriendlyColumnName);\n    if (properties === undefined) {\n      properties = new Map<string, string>();\n      this._columnProperties.set(cssFriendlyColumnName, properties);\n    }\n    return properties;\n  }\n\n  private _applySizeCss(cssFriendlyColumnName: string) {\n    const properties = this._getColumnPropertiesMap(cssFriendlyColumnName);\n    const propertyKeys = Array.from(properties.keys());\n\n    let index = this._columnIndexes.get(cssFriendlyColumnName);\n    if (index === undefined) {\n      if (!propertyKeys.length) {\n        // Nothing to set or unset.\n        return;\n      }\n\n      index = this._indexSequence++;\n      this._columnIndexes.set(cssFriendlyColumnName, index);\n    } else {\n      this._getStyleSheet().deleteRule(index);\n    }\n\n    const columnClassName = this.getColumnCssClass(cssFriendlyColumnName);\n    const tableClassName = this.columnResize.getUniqueCssClass();\n\n    const selector = `.${tableClassName} .${columnClassName}`;\n    const body = propertyKeys.map(key => `${key}:${properties.get(key)}`).join(';');\n\n    this._getStyleSheet().insertRule(`${selector} {${body}}`, index!);\n  }\n}\n\n/** Converts CSS pixel values to numbers, eg \"123px\" to 123. Returns NaN for non pixel values. */\nfunction coercePixelsFromCssValue(cssValue: string): number {\n  return Number(cssValue.match(/(\\d+)px/)?.[1]);\n}\n\n/** Gets the style.width pixels on the specified element if present, otherwise its offsetWidth. */\nfunction getElementWidth(element: HTMLElement) {\n  // Optimization: Check style.width first as we probably set it already before reading\n  // offsetWidth which triggers layout.\n  return coercePixelsFromCssValue(element.style.width) || element.offsetWidth;\n}\n\n/**\n * Converts CSS flex values as set in CdkFlexTableResizeStrategy to numbers,\n * eg \"0 0.01 123px\" to 123.\n */\nfunction coercePixelsFromFlexValue(flexValue: string|undefined): number {\n  return Number(flexValue?.match(/0 0\\.01 (\\d+)px/)?.[1]);\n}\n\nexport const TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER: Provider = {\n  provide: ResizeStrategy,\n  useClass: TableLayoutFixedResizeStrategy,\n};\nexport const FLEX_RESIZE_STRATEGY_PROVIDER: Provider = {\n  provide: ResizeStrategy,\n  useClass: CdkFlexTableResizeStrategy,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Provider} from '@angular/core';\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from '../column-resize-notifier';\nimport {HeaderRowEventDispatcher} from '../event-dispatcher';\nimport {\n  TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER,\n  FLEX_RESIZE_STRATEGY_PROVIDER,\n} from '../resize-strategy';\n\nconst PROVIDERS: Provider[] = [\n  ColumnResizeNotifier,\n  HeaderRowEventDispatcher,\n  ColumnResizeNotifierSource,\n];\n\nexport const TABLE_PROVIDERS: Provider[] = [\n  ...PROVIDERS,\n  TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER,\n];\nexport const FLEX_PROVIDERS: Provider[] = [...PROVIDERS, FLEX_RESIZE_STRATEGY_PROVIDER];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\nimport {CdkTable} from '@angular/cdk/table';\n\nimport {ColumnResize} from '../column-resize';\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from '../column-resize-notifier';\nimport {HeaderRowEventDispatcher} from '../event-dispatcher';\nimport {TABLE_PROVIDERS} from './constants';\n\n/**\n * Explicitly enables column resizing for a table-based cdk-table.\n * Individual columns must be annotated specifically.\n */\n@Directive({\n  selector: 'table[cdk-table][columnResize]',\n  providers: [\n    ...TABLE_PROVIDERS,\n    {provide: ColumnResize, useExisting: CdkColumnResize},\n  ],\n})\nexport class CdkColumnResize extends ColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly elementRef: ElementRef<HTMLElement>,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource,\n      protected readonly table: CdkTable<unknown>) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\nimport {CdkTable} from '@angular/cdk/table';\n\nimport {ColumnResize} from '../column-resize';\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from '../column-resize-notifier';\nimport {HeaderRowEventDispatcher} from '../event-dispatcher';\nimport {FLEX_PROVIDERS} from './constants';\n\n/**\n * Explicitly enables column resizing for a flexbox-based cdk-table.\n * Individual columns must be annotated specifically.\n */\n@Directive({\n  selector: 'cdk-table[columnResize]',\n  providers: [\n    ...FLEX_PROVIDERS,\n    {provide: ColumnResize, useExisting: CdkColumnResizeFlex},\n  ],\n})\nexport class CdkColumnResizeFlex extends ColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly elementRef: ElementRef<HTMLElement>,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource,\n      protected readonly table: CdkTable<unknown>) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\nimport {CdkTable} from '@angular/cdk/table';\n\nimport {ColumnResize} from '../column-resize';\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from '../column-resize-notifier';\nimport {HeaderRowEventDispatcher} from '../event-dispatcher';\nimport {TABLE_PROVIDERS} from './constants';\n\n/**\n * Implicitly enables column resizing for a table-based cdk-table.\n * Individual columns will be resizable unless opted out.\n */\n@Directive({\n  selector: 'table[cdk-table]',\n  providers: [\n    ...TABLE_PROVIDERS,\n    {provide: ColumnResize, useExisting: CdkDefaultEnabledColumnResize},\n  ],\n})\nexport class CdkDefaultEnabledColumnResize extends ColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly elementRef: ElementRef<HTMLElement>,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource,\n      protected readonly table: CdkTable<unknown>) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\nimport {CdkTable} from '@angular/cdk/table';\n\nimport {ColumnResize} from '../column-resize';\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from '../column-resize-notifier';\nimport {HeaderRowEventDispatcher} from '../event-dispatcher';\nimport {FLEX_PROVIDERS} from './constants';\n\n/**\n * Implicitly enables column resizing for a flex cdk-table.\n * Individual columns will be resizable unless opted out.\n */\n@Directive({\n  selector: 'cdk-table',\n  providers: [\n    ...FLEX_PROVIDERS,\n    {provide: ColumnResize, useExisting: CdkDefaultEnabledColumnResizeFlex},\n  ],\n})\nexport class CdkDefaultEnabledColumnResizeFlex extends ColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly elementRef: ElementRef<HTMLElement>,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource,\n      protected readonly table: CdkTable<unknown>) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkColumnResize} from './column-resize-directives/column-resize';\nimport {CdkColumnResizeFlex} from './column-resize-directives/column-resize-flex';\nimport {\n  CdkDefaultEnabledColumnResize\n} from './column-resize-directives/default-enabled-column-resize';\nimport {\n  CdkDefaultEnabledColumnResizeFlex\n} from './column-resize-directives/default-enabled-column-resize-flex';\n\n/**\n * One of two NgModules for use with CdkColumnResize.\n * When using this module, columns are resizable by default.\n */\n@NgModule({\n  declarations: [CdkDefaultEnabledColumnResize, CdkDefaultEnabledColumnResizeFlex],\n  exports: [CdkDefaultEnabledColumnResize, CdkDefaultEnabledColumnResizeFlex],\n})\nexport class CdkColumnResizeDefaultEnabledModule {}\n\n/**\n * One of two NgModules for use with CdkColumnResize.\n * When using this module, columns are not resizable by default.\n */\n@NgModule({\n  declarations: [CdkColumnResize, CdkColumnResizeFlex],\n  exports: [CdkColumnResize, CdkColumnResizeFlex],\n})\nexport class CdkColumnResizeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * Can be provided by the host application to enable persistence of column resize state.\n */\n@Injectable()\nexport abstract class ColumnSizeStore {\n  /** Returns the persisted size of the specified column in the specified table. */\n  abstract getSize(tableId: string, columnId: string): number;\n\n  /** Persists the size of the specified column in the specified table. */\n  abstract setSize(tableId: string, columnId: string): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\nimport {OverlayRef} from '@angular/cdk/overlay';\n\n/** Tracks state of resize events in progress. */\nexport class ResizeRef {\n  constructor(\n      readonly origin: ElementRef,\n      readonly overlayRef: OverlayRef,\n      readonly minWidthPx: number,\n      readonly maxWidthPx: number, ) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  Injector,\n  NgZone,\n  OnDestroy,\n  Type,\n  ViewContainerRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {Overlay, OverlayRef} from '@angular/cdk/overlay';\nimport {CdkColumnDef, _CoalescedStyleScheduler} from '@angular/cdk/table';\nimport {merge, Subject} from 'rxjs';\nimport {filter, takeUntil} from 'rxjs/operators';\n\nimport {_closest} from '@angular/cdk-experimental/popover-edit';\n\nimport {HEADER_ROW_SELECTOR} from './selectors';\nimport {ResizeOverlayHandle} from './overlay-handle';\nimport {ColumnResize} from './column-resize';\nimport {ColumnSizeAction, ColumnResizeNotifierSource} from './column-resize-notifier';\nimport {HeaderRowEventDispatcher} from './event-dispatcher';\nimport {ResizeRef} from './resize-ref';\nimport {ResizeStrategy} from './resize-strategy';\n\nconst OVERLAY_ACTIVE_CLASS = 'cdk-resizable-overlay-thumb-active';\n\n/**\n * Base class for Resizable directives which are applied to column headers to make those columns\n * resizable.\n */\n@Directive()\nexport abstract class Resizable<HandleComponent extends ResizeOverlayHandle>\n    implements AfterViewInit, OnDestroy {\n  protected minWidthPxInternal: number = 0;\n  protected maxWidthPxInternal: number = Number.MAX_SAFE_INTEGER;\n\n  protected inlineHandle?: HTMLElement;\n  protected overlayRef?: OverlayRef;\n  protected readonly destroyed = new Subject<void>();\n\n  protected abstract readonly columnDef: CdkColumnDef;\n  protected abstract readonly columnResize: ColumnResize;\n  protected abstract readonly directionality: Directionality;\n  protected abstract readonly document: Document;\n  protected abstract readonly elementRef: ElementRef;\n  protected abstract readonly eventDispatcher: HeaderRowEventDispatcher;\n  protected abstract readonly injector: Injector;\n  protected abstract readonly ngZone: NgZone;\n  protected abstract readonly overlay: Overlay;\n  protected abstract readonly resizeNotifier: ColumnResizeNotifierSource;\n  protected abstract readonly resizeStrategy: ResizeStrategy;\n  protected abstract readonly styleScheduler: _CoalescedStyleScheduler;\n  protected abstract readonly viewContainerRef: ViewContainerRef;\n  protected abstract readonly changeDetectorRef: ChangeDetectorRef;\n\n  private _viewInitialized = false;\n\n  /** The minimum width to allow the column to be sized to. */\n  get minWidthPx(): number {\n    return this.minWidthPxInternal;\n  }\n  set minWidthPx(value: number) {\n    this.minWidthPxInternal = value;\n\n    this.columnResize.setResized();\n    if (this.elementRef.nativeElement && this._viewInitialized) {\n      this._applyMinWidthPx();\n    }\n  }\n\n  /** The maximum width to allow the column to be sized to. */\n  get maxWidthPx(): number {\n    return this.maxWidthPxInternal;\n  }\n  set maxWidthPx(value: number) {\n    this.maxWidthPxInternal = value;\n\n    this.columnResize.setResized();\n    if (this.elementRef.nativeElement && this._viewInitialized) {\n      this._applyMaxWidthPx();\n    }\n  }\n\n  ngAfterViewInit() {\n    this._listenForRowHoverEvents();\n    this._listenForResizeEvents();\n    this._appendInlineHandle();\n\n    this.styleScheduler.scheduleEnd(() => {\n      this._viewInitialized = true;\n      this._applyMinWidthPx();\n      this._applyMaxWidthPx();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.next();\n    this.destroyed.complete();\n\n    if (this.inlineHandle) {\n      this.elementRef.nativeElement!.removeChild(this.inlineHandle);\n    }\n\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n    }\n  }\n\n  protected abstract getInlineHandleCssClassName(): string;\n\n  protected abstract getOverlayHandleComponentType(): Type<HandleComponent>;\n\n  private _createOverlayForHandle(): OverlayRef {\n    // Use of overlays allows us to properly capture click events spanning parts\n    // of two table cells and is also useful for displaying a resize thumb\n    // over both cells and extending it down the table as needed.\n\n    const isRtl = this.directionality.value === 'rtl';\n    const positionStrategy = this.overlay.position()\n        .flexibleConnectedTo(this.elementRef.nativeElement!)\n        .withFlexibleDimensions(false)\n        .withGrowAfterOpen(false)\n        .withPush(false)\n        .withDefaultOffsetX(isRtl ? 1 : 0)\n        .withPositions([{\n          originX: isRtl ? 'start' : 'end',\n          originY: 'top',\n          overlayX: 'center',\n          overlayY: 'top',\n        }]);\n\n    return this.overlay.create({\n      // Always position the overlay based on left-indexed coordinates.\n      direction: 'ltr',\n      disposeOnNavigation: true,\n      positionStrategy,\n      scrollStrategy: this.overlay.scrollStrategies.reposition(),\n      width: '16px',\n    });\n  }\n\n  private _listenForRowHoverEvents(): void {\n    const element = this.elementRef.nativeElement!;\n    const takeUntilDestroyed = takeUntil<boolean>(this.destroyed);\n\n\n    this.eventDispatcher.resizeOverlayVisibleForHeaderRow(_closest(element, HEADER_ROW_SELECTOR)!)\n        .pipe(takeUntilDestroyed).subscribe(hoveringRow => {\n      if (hoveringRow) {\n        if (!this.overlayRef) {\n          this.overlayRef = this._createOverlayForHandle();\n        }\n\n        this._showHandleOverlay();\n      } else if (this.overlayRef) {\n        // todo - can't detach during an active resize - need to work that out\n        this.overlayRef.detach();\n      }\n    });\n  }\n\n  private _listenForResizeEvents() {\n    const takeUntilDestroyed = takeUntil<ColumnSizeAction>(this.destroyed);\n\n    merge(\n        this.resizeNotifier.resizeCanceled,\n        this.resizeNotifier.triggerResize,\n    ).pipe(\n        takeUntilDestroyed,\n        filter(columnSize => columnSize.columnId === this.columnDef.name),\n    ).subscribe(({size, previousSize, completeImmediately}) => {\n      this.elementRef.nativeElement!.classList.add(OVERLAY_ACTIVE_CLASS);\n      this._applySize(size, previousSize);\n\n      if (completeImmediately) {\n        this._completeResizeOperation();\n      }\n    });\n\n    merge(\n        this.resizeNotifier.resizeCanceled,\n        this.resizeNotifier.resizeCompleted,\n    ).pipe(takeUntilDestroyed).subscribe(columnSize => {\n      this._cleanUpAfterResize(columnSize);\n    });\n  }\n\n  private _completeResizeOperation(): void {\n    this.ngZone.run(() => {\n      this.resizeNotifier.resizeCompleted.next({\n        columnId: this.columnDef.name,\n        size: this.elementRef.nativeElement!.offsetWidth,\n      });\n    });\n  }\n\n  private _cleanUpAfterResize(columnSize: ColumnSizeAction): void {\n    this.elementRef.nativeElement!.classList.remove(OVERLAY_ACTIVE_CLASS);\n\n    if (this.overlayRef && this.overlayRef.hasAttached()) {\n      this._updateOverlayHandleHeight();\n      this.overlayRef.updatePosition();\n\n      if (columnSize.columnId === this.columnDef.name) {\n        this.inlineHandle!.focus();\n      }\n    }\n  }\n\n  private _createHandlePortal(): ComponentPortal<HandleComponent> {\n    const injector = Injector.create({\n      parent: this.injector,\n      providers: [{\n        provide: ResizeRef,\n        useValue: new ResizeRef(this.elementRef, this.overlayRef!, this.minWidthPx, this.maxWidthPx)\n      }]\n    });\n\n    return new ComponentPortal(this.getOverlayHandleComponentType(),\n        this.viewContainerRef, injector);\n  }\n\n  private _showHandleOverlay(): void {\n    this._updateOverlayHandleHeight();\n    this.overlayRef!.attach(this._createHandlePortal());\n\n    // Needed to ensure that all of the lifecycle hooks inside the overlay run immediately.\n    this.changeDetectorRef.markForCheck();\n  }\n\n  private _updateOverlayHandleHeight() {\n    this.overlayRef!.updateSize({height: this.elementRef.nativeElement!.offsetHeight});\n  }\n\n  private _applySize(sizeInPixels: number, previousSize?: number): void {\n    const sizeToApply = Math.min(Math.max(sizeInPixels, this.minWidthPx, 0), this.maxWidthPx);\n\n    this.resizeStrategy.applyColumnSize(this.columnDef.cssClassFriendlyName,\n        this.elementRef.nativeElement!, sizeToApply, previousSize);\n  }\n\n  private _applyMinWidthPx(): void {\n    this.resizeStrategy.applyMinColumnSize(this.columnDef.cssClassFriendlyName,\n        this.elementRef.nativeElement, this.minWidthPx);\n  }\n\n  private _applyMaxWidthPx(): void {\n    this.resizeStrategy.applyMaxColumnSize(this.columnDef.cssClassFriendlyName,\n        this.elementRef.nativeElement, this.maxWidthPx);\n  }\n\n  private _appendInlineHandle(): void {\n    this.styleScheduler.schedule(() => {\n      this.inlineHandle = this.document.createElement('div');\n      this.inlineHandle.tabIndex = 0;\n      this.inlineHandle.className = this.getInlineHandleCssClassName();\n\n      // TODO: Apply correct aria role (probably slider) after a11y spec questions resolved.\n\n      this.elementRef.nativeElement!.appendChild(this.inlineHandle);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterViewInit, Directive, ElementRef, OnDestroy, NgZone} from '@angular/core';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {CdkColumnDef, _CoalescedStyleScheduler} from '@angular/cdk/table';\nimport {fromEvent, Subject, merge} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  pairwise,\n  startWith,\n  takeUntil,\n} from 'rxjs/operators';\n\nimport {_closest} from '@angular/cdk-experimental/popover-edit';\n\nimport {HEADER_CELL_SELECTOR} from './selectors';\nimport {ColumnResizeNotifierSource} from './column-resize-notifier';\nimport {HeaderRowEventDispatcher} from './event-dispatcher';\nimport {ResizeRef} from './resize-ref';\n\n// TODO: Take another look at using cdk drag drop. IIRC I ran into a couple\n// good reasons for not using it but I don't remember what they were at this point.\n/**\n * Base class for a component shown over the edge of a resizable column that is responsible\n * for handling column resize mouse events and displaying any visible UI on the column edge.\n */\n@Directive()\nexport abstract class ResizeOverlayHandle implements AfterViewInit, OnDestroy {\n  protected readonly destroyed = new Subject<void>();\n\n  protected abstract readonly columnDef: CdkColumnDef;\n  protected abstract readonly document: Document;\n  protected abstract readonly directionality: Directionality;\n  protected abstract readonly elementRef: ElementRef;\n  protected abstract readonly eventDispatcher: HeaderRowEventDispatcher;\n  protected abstract readonly ngZone: NgZone;\n  protected abstract readonly resizeNotifier: ColumnResizeNotifierSource;\n  protected abstract readonly resizeRef: ResizeRef;\n  protected abstract readonly styleScheduler: _CoalescedStyleScheduler;\n\n  ngAfterViewInit() {\n    this._listenForMouseEvents();\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n\n  private _listenForMouseEvents() {\n    this.ngZone.runOutsideAngular(() => {\n      fromEvent<MouseEvent>(this.elementRef.nativeElement!, 'mouseenter').pipe(\n          mapTo(this.resizeRef.origin.nativeElement!),\n          takeUntil(this.destroyed),\n      ).subscribe(cell => this.eventDispatcher.headerCellHovered.next(cell));\n\n      fromEvent<MouseEvent>(this.elementRef.nativeElement!, 'mouseleave').pipe(\n          map(event => event.relatedTarget &&\n              _closest(event.relatedTarget as Element, HEADER_CELL_SELECTOR)),\n          takeUntil(this.destroyed)\n      ).subscribe(cell => this.eventDispatcher.headerCellHovered.next(cell));\n\n      fromEvent<MouseEvent>(this.elementRef.nativeElement!, 'mousedown')\n          .pipe(takeUntil(this.destroyed)).subscribe(mousedownEvent => {\n        this._dragStarted(mousedownEvent);\n      });\n    });\n  }\n\n  private _dragStarted(mousedownEvent: MouseEvent) {\n    // Only allow dragging using the left mouse button.\n    if (mousedownEvent.button !== 0) {\n      return;\n    }\n\n    const mouseup = fromEvent<MouseEvent>(this.document, 'mouseup');\n    const mousemove = fromEvent<MouseEvent>(this.document, 'mousemove');\n    const escape = fromEvent<KeyboardEvent>(this.document, 'keyup')\n        .pipe(filter(event => event.keyCode === ESCAPE));\n\n    const startX = mousedownEvent.screenX;\n\n    const initialSize = this._getOriginWidth();\n    let overlayOffset = 0;\n    let originOffset = this._getOriginOffset();\n    let size = initialSize;\n    let overshot = 0;\n\n    this.updateResizeActive(true);\n\n    mouseup.pipe(takeUntil(merge(escape, this.destroyed))).subscribe(({screenX}) => {\n      this.styleScheduler.scheduleEnd(() => {\n        this._notifyResizeEnded(size, screenX !== startX);\n      });\n    });\n\n    escape.pipe(takeUntil(merge(mouseup, this.destroyed))).subscribe(() => {\n      this._notifyResizeEnded(initialSize);\n    });\n\n    mousemove.pipe(\n        map(({screenX}) => screenX),\n        startWith(startX),\n        distinctUntilChanged(),\n        pairwise(),\n        takeUntil(merge(mouseup, escape, this.destroyed))\n    ).subscribe(([prevX, currX]) => {\n      let deltaX = currX - prevX;\n\n      // If the mouse moved further than the resize was able to match, limit the\n      // movement of the overlay to match the actual size and position of the origin.\n      if (overshot !== 0) {\n        if (overshot < 0 && deltaX < 0 || overshot > 0 && deltaX > 0) {\n          overshot += deltaX;\n          return;\n        } else {\n          const remainingOvershot = overshot + deltaX;\n          overshot = overshot > 0 ?\n              Math.max(remainingOvershot, 0) : Math.min(remainingOvershot, 0);\n          deltaX = remainingOvershot - overshot;\n\n          if (deltaX === 0) {\n            return;\n          }\n        }\n      }\n\n      let computedNewSize: number = size + (this._isLtr() ? deltaX : -deltaX);\n      computedNewSize = Math.min(\n          Math.max(computedNewSize, this.resizeRef.minWidthPx, 0), this.resizeRef.maxWidthPx);\n\n      this.resizeNotifier.triggerResize.next({\n        columnId: this.columnDef.name,\n        size: computedNewSize,\n        previousSize: size,\n        isStickyColumn: this.columnDef.sticky || this.columnDef.stickyEnd,\n      });\n\n      this.styleScheduler.scheduleEnd(() => {\n        const originNewSize = this._getOriginWidth();\n        const originNewOffset = this._getOriginOffset();\n        const originOffsetDeltaX = originNewOffset - originOffset;\n        const originSizeDeltaX = originNewSize - size;\n        size = originNewSize;\n        originOffset = originNewOffset;\n\n        overshot += deltaX + (this._isLtr() ? -originSizeDeltaX : originSizeDeltaX);\n        overlayOffset += originOffsetDeltaX + (this._isLtr() ? originSizeDeltaX : 0);\n\n        this._updateOverlayOffset(overlayOffset);\n      });\n    });\n  }\n\n  protected updateResizeActive(active: boolean): void {\n    this.eventDispatcher.overlayHandleActiveForCell.next(\n        active ? this.resizeRef.origin.nativeElement! : null);\n  }\n\n  private _getOriginWidth(): number {\n    return this.resizeRef.origin.nativeElement!.offsetWidth;\n  }\n\n  private _getOriginOffset(): number {\n    return this.resizeRef.origin.nativeElement!.offsetLeft;\n  }\n\n  private _updateOverlayOffset(offset: number): void {\n    this.resizeRef.overlayRef.overlayElement.style.transform =\n        `translateX(${coerceCssPixelValue(offset)})`;\n  }\n\n  private _isLtr(): boolean {\n    return this.directionality.value === 'ltr';\n  }\n\n  private _notifyResizeEnded(size: number, completedSuccessfully = false): void {\n    this.updateResizeActive(false);\n\n    this.ngZone.run(() => {\n      const sizeMessage = {columnId: this.columnDef.name, size};\n      if (completedSuccessfully) {\n        this.resizeNotifier.resizeCompleted.next(sizeMessage);\n      } else {\n        this.resizeNotifier.resizeCanceled.next(sizeMessage);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './column-resize';\nexport * from './column-resize-directives/column-resize';\nexport * from './column-resize-directives/column-resize-flex';\nexport * from './column-resize-directives/default-enabled-column-resize';\nexport * from './column-resize-directives/default-enabled-column-resize-flex';\nexport * from './column-resize-module';\nexport * from './column-resize-notifier';\nexport * from './column-size-store';\nexport * from './event-dispatcher';\nexport * from './resizable';\nexport * from './resize-ref';\nexport * from './resize-strategy';\nexport * from './overlay-handle';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {FLEX_PROVIDERS as ɵangular_material_src_cdk_experimental_column_resize_column_resize_b,TABLE_PROVIDERS as ɵangular_material_src_cdk_experimental_column_resize_column_resize_a} from './column-resize-directives/constants';"]}