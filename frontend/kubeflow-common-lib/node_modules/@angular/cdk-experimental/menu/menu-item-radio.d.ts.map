{"version":3,"file":"menu-item-radio.d.ts","sources":["menu-item-radio.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { OnDestroy, ElementRef, NgZone } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { CdkMenuItemSelectable } from './menu-item-selectable';\nimport { CdkMenuItemTrigger } from './menu-item-trigger';\nimport { Menu } from './menu-interface';\nimport { MenuAim } from './menu-aim';\n/**\n * A directive providing behavior for the \"menuitemradio\" ARIA role, which behaves similarly to\n * a conventional radio-button. Any sibling `CdkMenuItemRadio` instances within the same `CdkMenu`\n * or `CdkMenuGroup` comprise a radio group with unique selection enforced.\n */\nexport declare class CdkMenuItemRadio extends CdkMenuItemSelectable implements OnDestroy {\n    private readonly _selectionDispatcher;\n    /** Function to unregister the selection dispatcher */\n    private _removeDispatcherListener;\n    constructor(_selectionDispatcher: UniqueSelectionDispatcher, element: ElementRef<HTMLElement>, ngZone: NgZone, parentMenu?: Menu, menuAim?: MenuAim, dir?: Directionality, \n    /** Reference to the CdkMenuItemTrigger directive if one is added to the same element */\n    menuTrigger?: CdkMenuItemTrigger);\n    /** Configure the unique selection dispatcher listener in order to toggle the checked state  */\n    private _registerDispatcherListener;\n    /** Toggles the checked state of the radio-button. */\n    trigger(): void;\n    ngOnDestroy(): void;\n}\n"]}