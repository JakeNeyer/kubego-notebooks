{"version":3,"file":"menu-item.d.ts","sources":["menu-item.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { CdkMenuItemTrigger } from './menu-item-trigger';\nimport { Menu } from './menu-interface';\nimport { FocusableElement } from './pointer-focus-tracker';\nimport { Toggler, MenuAim } from './menu-aim';\n/**\n * Directive which provides the ability for an element to be focused and navigated to using the\n * keyboard when residing in a CdkMenu, CdkMenuBar, or CdkMenuGroup. It performs user defined\n * behavior when clicked.\n */\nexport declare class CdkMenuItem implements FocusableOption, FocusableElement, Toggler, OnDestroy {\n    readonly _elementRef: ElementRef<HTMLElement>;\n    private readonly _ngZone;\n    private readonly _parentMenu?;\n    private readonly _menuAim?;\n    private readonly _dir?;\n    /** Reference to the CdkMenuItemTrigger directive if one is added to the same element */\n    private readonly _menuTrigger?;\n    /**  Whether the CdkMenuItem is disabled - defaults to false */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _disabled;\n    /**\n     * If this MenuItem is a regular MenuItem, outputs when it is triggered by a keyboard or mouse\n     * event.\n     */\n    readonly triggered: EventEmitter<void>;\n    /**\n     * The tabindex for this menu item managed internally and used for implementing roving a\n     * tab index.\n     */\n    _tabindex: 0 | -1;\n    /** Emits when the menu item is destroyed. */\n    private readonly _destroyed;\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone, _parentMenu?: Menu | undefined, _menuAim?: MenuAim | undefined, _dir?: Directionality | undefined, \n    /** Reference to the CdkMenuItemTrigger directive if one is added to the same element */\n    _menuTrigger?: CdkMenuItemTrigger | undefined);\n    /** Place focus on the element. */\n    focus(): void;\n    /** Reset the _tabindex to -1. */\n    _resetTabIndex(): void;\n    /**\n     * Set the tab index to 0 if not disabled and it's a focus event, or a mouse enter if this element\n     * is not in a menu bar.\n     */\n    _setTabIndex(event?: MouseEvent): void;\n    /** Whether this menu item is standalone or within a menu or menu bar. */\n    _isStandaloneItem(): boolean;\n    /**\n     * If the menu item is not disabled and the element does not have a menu trigger attached, emit\n     * on the cdkMenuItemTriggered emitter and close all open menus.\n     */\n    trigger(): void;\n    /** Whether the menu item opens a menu. */\n    hasMenu(): boolean;\n    /** Return true if this MenuItem has an attached menu and it is open. */\n    isMenuOpen(): boolean;\n    /**\n     * Get a reference to the rendered Menu if the Menu is open and it is visible in the DOM.\n     * @return the menu if it is open, otherwise undefined.\n     */\n    getMenu(): Menu | undefined;\n    /** Get the MenuItemTrigger associated with this element. */\n    getMenuTrigger(): CdkMenuItemTrigger | undefined;\n    /** Get the label for this element which is required by the FocusableOption interface. */\n    getLabel(): string;\n    /**\n     * Handles keyboard events for the menu item, specifically either triggering the user defined\n     * callback or opening/closing the current menu based on whether the left or right arrow key was\n     * pressed.\n     * @param event the keyboard event to handle\n     */\n    _onKeydown(event: KeyboardEvent): void;\n    /**\n     * Subscribe to the mouseenter events and close any sibling menu items if this element is moused\n     * into.\n     */\n    private _setupMouseEnter;\n    /**\n     * Return true if the enclosing parent menu is configured in a horizontal orientation, false\n     * otherwise or if no parent.\n     */\n    private _isParentVertical;\n    /** Get the MenuStack from the parent menu. */\n    private _getMenuStack;\n    ngOnDestroy(): void;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\n"]}