{"version":3,"file":"menu.d.ts","sources":["menu.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, AfterContentInit, OnDestroy, OnInit, NgZone, ElementRef } from '@angular/core';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { CdkMenuGroup } from './menu-group';\nimport { CdkMenuPanel } from './menu-panel';\nimport { Menu } from './menu-interface';\nimport { MenuStack } from './menu-stack';\nimport { MenuAim } from './menu-aim';\n/**\n * Directive which configures the element as a Menu which should contain child elements marked as\n * CdkMenuItem or CdkMenuGroup. Sets the appropriate role and aria-attributes for a menu and\n * contains accessible keyboard and mouse handling logic.\n *\n * It also acts as a RadioGroup for elements marked with role `menuitemradio`.\n */\nexport declare class CdkMenu extends CdkMenuGroup implements Menu, AfterContentInit, OnInit, OnDestroy {\n    private readonly _ngZone;\n    readonly _elementRef: ElementRef<HTMLElement>;\n    private readonly _menuAim?;\n    private readonly _dir?;\n    private readonly _menuPanel?;\n    /**\n     * Sets the aria-orientation attribute and determines where menus will be opened.\n     * Does not affect styling/layout.\n     */\n    orientation: 'horizontal' | 'vertical';\n    /** Event emitted when the menu is closed. */\n    readonly closed: EventEmitter<void | 'click' | 'tab' | 'escape'>;\n    /** Track the Menus making up the open menu stack. */\n    _menuStack: MenuStack;\n    /** Handles keyboard events for the menu. */\n    private _keyManager;\n    /** Manages items under mouse focus. */\n    private _pointerTracker?;\n    /** List of nested CdkMenuGroup elements */\n    private readonly _nestedGroups;\n    /** All child MenuItem elements nested in this Menu. */\n    private readonly _allItems;\n    /** The Menu Item which triggered the open submenu. */\n    private _openItem?;\n    /**\n     * A reference to the enclosing parent menu panel.\n     *\n     * Required to be set when using ViewEngine since ViewEngine does support injecting a reference to\n     * the parent directive if the parent directive is placed on an `ng-template`. If using Ivy, the\n     * injected value will be used over this one.\n     */\n    private readonly _explicitPanel?;\n    constructor(_ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _menuAim?: MenuAim | undefined, _dir?: Directionality | undefined, _menuPanel?: CdkMenuPanel | undefined);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    /** Place focus on the first MenuItem in the menu and set the focus origin. */\n    focusFirstItem(focusOrigin?: FocusOrigin): void;\n    /** Place focus on the last MenuItem in the menu and set the focus origin. */\n    focusLastItem(focusOrigin?: FocusOrigin): void;\n    /** Handle keyboard events for the Menu. */\n    _handleKeyEvent(event: KeyboardEvent): void;\n    /** Register this menu with its enclosing parent menu panel */\n    private _registerWithParentPanel;\n    /**\n     * Get the enclosing CdkMenuPanel defaulting to the injected reference over the developer\n     * provided reference.\n     */\n    private _getMenuPanel;\n    /**\n     * Complete the change emitter if there are any nested MenuGroups or register to complete the\n     * change emitter if a MenuGroup is rendered at some point\n     */\n    private _completeChangeEmitter;\n    /** Return true if there are nested CdkMenuGroup elements within the Menu */\n    private _hasNestedGroups;\n    /** Setup the FocusKeyManager with the correct orientation for the menu. */\n    private _setKeyManager;\n    /**\n     * Set the PointerFocusTracker and ensure that when mouse focus changes the key manager is updated\n     * with the latest menu item under mouse focus.\n     */\n    private _subscribeToMouseManager;\n    /** Subscribe to the MenuStack close and empty observables. */\n    private _subscribeToMenuStack;\n    /**\n     * Close the open menu if the current active item opened the requested MenuStackItem.\n     * @param item the MenuStackItem requested to be closed.\n     */\n    private _closeOpenMenu;\n    /** Set focus the either the current, previous or next item based on the FocusNext event. */\n    private _toggleMenuFocus;\n    /**\n     * Subscribe to the menu trigger's open events in order to track the trigger which opened the menu\n     * and stop tracking it when the menu is closed.\n     */\n    private _subscribeToMenuOpen;\n    /** Return true if this menu has been configured in a horizontal orientation. */\n    private _isHorizontal;\n    /**\n     * Return true if this menu is an inline menu. That is, it does not exist in a pop-up and is\n     * always visible in the dom.\n     */\n    _isInline(): boolean;\n    ngOnDestroy(): void;\n    /** Emit and complete the closed event emitter */\n    private _emitClosedEvent;\n}\n"]}