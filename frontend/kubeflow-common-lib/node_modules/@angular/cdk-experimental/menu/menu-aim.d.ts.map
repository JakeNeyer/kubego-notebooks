{"version":3,"file":"menu-aim.d.ts","sources":["menu-aim.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone, OnDestroy, InjectionToken } from '@angular/core';\nimport { PointerFocusTracker, FocusableElement } from './pointer-focus-tracker';\nimport { Menu } from './menu-interface';\n/**\n * MenuAim is responsible for determining if a sibling menuitem's menu should be closed when a\n * Toggler item is hovered into. It is up to the hovered in item to call the MenuAim service in\n * order to determine if it may perform its close actions.\n */\nexport interface MenuAim {\n    /** Set the Menu and its PointerFocusTracker. */\n    initialize(menu: Menu, pointerTracker: PointerFocusTracker<FocusableElement & Toggler>): void;\n    /**\n     * Calls the `doToggle` callback when it is deemed that the user is not moving towards\n     * the submenu.\n     * @param doToggle the function called when the user is not moving towards the submenu.\n     */\n    toggle(doToggle: () => void): void;\n}\n/** Injection token used for an implementation of MenuAim. */\nexport declare const MENU_AIM: InjectionToken<MenuAim>;\n/**\n * An element which when hovered over may perform closing actions on the open submenu and\n * potentially open its own menu.\n */\nexport interface Toggler {\n    getMenu(): Menu | undefined;\n}\n/**\n * TargetMenuAim predicts if a user is moving into a submenu. It calculates the\n * trajectory of the user's mouse movement in the current menu to determine if the\n * mouse is moving towards an open submenu.\n *\n * The determination is made by calculating the slope of the users last NUM_POINTS moves where each\n * pair of points determines if the trajectory line points into the submenu. It uses consensus\n * approach by checking if at least NUM_POINTS / 2 pairs determine that the user is moving towards\n * to submenu.\n */\nexport declare class TargetMenuAim implements MenuAim, OnDestroy {\n    private readonly _ngZone;\n    /** The last NUM_POINTS mouse move events. */\n    private readonly _points;\n    /** Reference to the root menu in which we are tracking mouse moves. */\n    private _menu;\n    /** Reference to the root menu's mouse manager. */\n    private _pointerTracker;\n    /** The id associated with the current timeout call waiting to resolve. */\n    private _timeoutId;\n    /** Emits when this service is destroyed. */\n    private readonly _destroyed;\n    constructor(_ngZone: NgZone);\n    /** Set the Menu and its PointerFocusTracker. */\n    initialize(menu: Menu, pointerTracker: PointerFocusTracker<FocusableElement & Toggler>): void;\n    /**\n     * Calls the `doToggle` callback when it is deemed that the user is not moving towards\n     * the submenu.\n     * @param doToggle the function called when the user is not moving towards the submenu.\n     */\n    toggle(doToggle: () => void): void;\n    /**\n     * Start the delayed toggle handler if one isn't running already.\n     *\n     * The delayed toggle handler executes the `doToggle` callback after some period of time iff the\n     * users mouse is on an item in the current menu.\n     */\n    private _startTimeout;\n    /** Whether the user is heading towards the open submenu. */\n    private _isMovingToSubmenu;\n    /** Get the bounding DOMRect for the open submenu. */\n    private _getSubmenuBounds;\n    /**\n     * Check if a reference to the PointerFocusTracker and menu element is provided.\n     * @throws an error if neither reference is provided.\n     */\n    private _checkConfigured;\n    /** Subscribe to the root menus mouse move events and update the tracked mouse points. */\n    private _subscribeToMouseMoves;\n    ngOnDestroy(): void;\n}\n/**\n * CdkTargetMenuAim is a provider for the TargetMenuAim service. It should be added to an\n * element with either the `cdkMenu` or `cdkMenuBar` directive and child menu items.\n */\nexport declare class CdkTargetMenuAim {\n}\n"]}