{"version":3,"file":"context-menu.d.ts","sources":["context-menu.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewContainerRef, EventEmitter, OnDestroy, InjectionToken } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { CdkMenuPanel } from './menu-panel';\n/** Tracks the last open context menu trigger across the entire application. */\nexport declare class ContextMenuTracker {\n    /** The last open context menu trigger. */\n    private static _openContextMenuTrigger?;\n    /**\n     * Close the previous open context menu and set the given one as being open.\n     * @param trigger the trigger for the currently open Context Menu.\n     */\n    update(trigger: CdkContextMenuTrigger): void;\n}\n/** Configuration options passed to the context menu. */\nexport declare type ContextMenuOptions = {\n    /** The opened menus X coordinate offset from the triggering position. */\n    offsetX: number;\n    /** The opened menus Y coordinate offset from the triggering position. */\n    offsetY: number;\n};\n/** Injection token for the ContextMenu options object. */\nexport declare const CDK_CONTEXT_MENU_DEFAULT_OPTIONS: InjectionToken<ContextMenuOptions>;\n/** The coordinates of where the context menu should open. */\nexport declare type ContextMenuCoordinates = {\n    x: number;\n    y: number;\n};\n/**\n * A directive which when placed on some element opens a the Menu it is bound to when a user\n * right-clicks within that element. It is aware of nested Context Menus and the lowest level\n * non-disabled context menu will trigger.\n */\nexport declare class CdkContextMenuTrigger implements OnDestroy {\n    protected readonly _viewContainerRef: ViewContainerRef;\n    private readonly _overlay;\n    private readonly _contextMenuTracker;\n    private readonly _options;\n    private readonly _directionality?;\n    /** Template reference variable to the menu to open on right click. */\n    get menuPanel(): CdkMenuPanel;\n    set menuPanel(panel: CdkMenuPanel);\n    /** Reference to the MenuPanel this trigger toggles. */\n    private _menuPanel;\n    /** Emits when the attached menu is requested to open. */\n    readonly opened: EventEmitter<void>;\n    /** Emits when the attached menu is requested to close. */\n    readonly closed: EventEmitter<void>;\n    /** Whether the context menu should be disabled. */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _disabled;\n    /** A reference to the overlay which manages the triggered menu. */\n    private _overlayRef;\n    /** The content of the menu panel opened by this trigger. */\n    private _panelContent;\n    /** Emits when the element is destroyed. */\n    private readonly _destroyed;\n    /** The menu stack for this trigger and its associated menus. */\n    private readonly _menuStack;\n    /** Emits when the outside pointer events listener on the overlay should be stopped. */\n    private readonly _stopOutsideClicksListener;\n    constructor(_viewContainerRef: ViewContainerRef, _overlay: Overlay, _contextMenuTracker: ContextMenuTracker, _options: ContextMenuOptions, _directionality?: Directionality | undefined);\n    /**\n     * Open the attached menu at the specified location.\n     * @param coordinates where to open the context menu\n     */\n    open(coordinates: ContextMenuCoordinates): void;\n    /** Close the opened menu. */\n    close(): void;\n    /**\n     * Open the context menu and close any previously open menus.\n     * @param event the mouse event which opens the context menu.\n     */\n    _openOnContextMenu(event: MouseEvent): void;\n    /** Whether the attached menu is open. */\n    isOpen(): boolean;\n    /**\n     * Get the configuration object used to create the overlay.\n     * @param coordinates the location to place the opened menu\n     */\n    private _getOverlayConfig;\n    /**\n     * Build the position strategy for the overlay which specifies where to place the menu.\n     * @param coordinates the location to place the opened menu\n     */\n    private _getOverlayPositionStrategy;\n    /**\n     * Determine and return where to position the opened menu relative to the mouse location.\n     */\n    private _getOverlayPositions;\n    /**\n     * Get the portal to be attached to the overlay which contains the menu. Allows for the menu\n     * content to change dynamically and be reflected in the application.\n     */\n    private _getMenuContent;\n    /** Subscribe to the menu stack close events and close this menu when requested. */\n    private _setMenuStackListener;\n    /**\n     * Subscribe to the overlays outside pointer events stream and handle closing out the stack if a\n     * click occurs outside the menus.\n     */\n    private _subscribeToOutsideClicks;\n    ngOnDestroy(): void;\n    /** Destroy and unset the overlay reference it if exists. */\n    private _destroyOverlay;\n    /** Set the menu panels menu stack back to null. */\n    private _resetPanelMenuStack;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\n"]}