{"version":3,"file":"menu-item-trigger.d.ts","sources":["menu-item-trigger.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, ElementRef, ViewContainerRef, OnDestroy, NgZone } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { CdkMenuPanel } from './menu-panel';\nimport { Menu } from './menu-interface';\nimport { MenuStack } from './menu-stack';\nimport { MenuAim } from './menu-aim';\n/**\n * Whether the target element is a menu item to be ignored by the overlay background click handler.\n */\nexport declare function isClickInsideMenuOverlay(target: Element): boolean;\n/**\n * A directive to be combined with CdkMenuItem which opens the Menu it is bound to. If the\n * element is in a top level MenuBar it will open the menu on click, or if a sibling is already\n * opened it will open on hover. If it is inside of a Menu it will open the attached Submenu on\n * hover regardless of its sibling state.\n *\n * The directive must be placed along with the `cdkMenuItem` directive in order to enable full\n * functionality.\n */\nexport declare class CdkMenuItemTrigger implements OnDestroy {\n    private readonly _elementRef;\n    protected readonly _viewContainerRef: ViewContainerRef;\n    private readonly _overlay;\n    private readonly _ngZone;\n    private readonly _parentMenu?;\n    private readonly _menuAim?;\n    private readonly _directionality?;\n    /** Template reference variable to the menu this trigger opens */\n    get menuPanel(): CdkMenuPanel | undefined;\n    set menuPanel(panel: CdkMenuPanel | undefined);\n    /** Reference to the MenuPanel this trigger toggles. */\n    private _menuPanel?;\n    /** Emits when the attached menu is requested to open */\n    readonly opened: EventEmitter<void>;\n    /** Emits when the attached menu is requested to close */\n    readonly closed: EventEmitter<void>;\n    /** The menu stack for this trigger and its sub-menus. */\n    _menuStack: MenuStack;\n    /** A reference to the overlay which manages the triggered menu */\n    private _overlayRef;\n    /** The content of the menu panel opened by this trigger. */\n    private _panelContent;\n    /** Emits when this trigger is destroyed. */\n    private readonly _destroyed;\n    /** Emits when the outside pointer events listener on the overlay should be stopped. */\n    private readonly _stopOutsideClicksListener;\n    constructor(_elementRef: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, _overlay: Overlay, _ngZone: NgZone, _parentMenu?: Menu | undefined, _menuAim?: MenuAim | undefined, _directionality?: Directionality | undefined);\n    /** Open/close the attached menu if the trigger has been configured with one */\n    toggle(): void;\n    /** Open the attached menu. */\n    openMenu(): void;\n    /** Close the opened menu. */\n    closeMenu(): void;\n    /** Return true if the trigger has an attached menu */\n    hasMenu(): boolean;\n    /** Whether the menu this button is a trigger for is open */\n    isMenuOpen(): boolean;\n    /**\n     * Get a reference to the rendered Menu if the Menu is open and it is visible in the DOM.\n     * @return the menu if it is open, otherwise undefined.\n     */\n    getMenu(): Menu | undefined;\n    /**\n     * Subscribe to the mouseenter events and close any sibling menu items if this element is moused\n     * into.\n     */\n    private _subscribeToMouseEnter;\n    /**\n     * Handles keyboard events for the menu item, specifically opening/closing the attached menu and\n     * focusing the appropriate submenu item.\n     * @param event the keyboard event to handle\n     */\n    _toggleOnKeydown(event: KeyboardEvent): void;\n    /** Close out any sibling menu trigger menus. */\n    private _closeSiblingTriggers;\n    /** Get the configuration object used to create the overlay */\n    private _getOverlayConfig;\n    /** Build the position strategy for the overlay which specifies where to place the menu */\n    private _getOverlayPositionStrategy;\n    /** Determine and return where to position the opened menu relative to the menu item */\n    private _getOverlayPositions;\n    /**\n     * Get the portal to be attached to the overlay which contains the menu. Allows for the menu\n     * content to change dynamically and be reflected in the application.\n     */\n    private _getPortal;\n    /**\n     * @return true if if the enclosing parent menu is configured in a vertical orientation.\n     */\n    private _isParentVertical;\n    /**\n     * Subscribe to the MenuStack close events if this is a standalone trigger and close out the menu\n     * this triggers when requested.\n     */\n    private _registerCloseHandler;\n    /** Get the menu stack for this trigger - either from the parent or this trigger. */\n    private _getMenuStack;\n    ngOnDestroy(): void;\n    /** Set the menu panels menu stack back to null. */\n    private _resetPanelMenuStack;\n    /**\n     * Subscribe to the overlays outside pointer events stream and handle closing out the stack if a\n     * click occurs outside the menus.\n     */\n    private _subscribeToOutsideClicks;\n    /** Destroy and unset the overlay reference it if exists */\n    private _destroyOverlay;\n}\n"]}