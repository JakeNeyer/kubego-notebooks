{"version":3,"file":"menu-bar.d.ts","sources":["menu-bar.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, OnDestroy, NgZone, ElementRef } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { CdkMenuGroup } from './menu-group';\nimport { Menu } from './menu-interface';\nimport { MenuStack } from './menu-stack';\nimport { MenuAim } from './menu-aim';\n/**\n * Directive applied to an element which configures it as a MenuBar by setting the appropriate\n * role, aria attributes, and accessible keyboard and mouse handling logic. The component that\n * this directive is applied to should contain components marked with CdkMenuItem.\n *\n */\nexport declare class CdkMenuBar extends CdkMenuGroup implements Menu, AfterContentInit, OnDestroy {\n    readonly _menuStack: MenuStack;\n    private readonly _ngZone;\n    readonly _elementRef: ElementRef<HTMLElement>;\n    private readonly _menuAim?;\n    private readonly _dir?;\n    /**\n     * Sets the aria-orientation attribute and determines where menus will be opened.\n     * Does not affect styling/layout.\n     */\n    orientation: 'horizontal' | 'vertical';\n    /** Handles keyboard events for the MenuBar. */\n    private _keyManager;\n    /** Manages items under mouse focus */\n    private _pointerTracker?;\n    /** Emits when the MenuBar is destroyed. */\n    private readonly _destroyed;\n    /** All child MenuItem elements nested in this MenuBar. */\n    private readonly _allItems;\n    /** The Menu Item which triggered the open submenu. */\n    private _openItem?;\n    constructor(_menuStack: MenuStack, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _menuAim?: MenuAim | undefined, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    /** Place focus on the first MenuItem in the menu and set the focus origin. */\n    focusFirstItem(focusOrigin?: FocusOrigin): void;\n    /** Place focus on the last MenuItem in the menu and set the focus origin. */\n    focusLastItem(focusOrigin?: FocusOrigin): void;\n    /**\n     * Handle keyboard events, specifically changing the focused element and/or toggling the active\n     * items menu.\n     * @param event the KeyboardEvent to handle.\n     */\n    _handleKeyEvent(event: KeyboardEvent): void;\n    /** Setup the FocusKeyManager with the correct orientation for the menu bar. */\n    private _setKeyManager;\n    /**\n     * Set the PointerFocusTracker and ensure that when mouse focus changes the key manager is updated\n     * with the latest menu item under mouse focus.\n     */\n    private _subscribeToMouseManager;\n    /** Subscribe to the MenuStack close and empty observables. */\n    private _subscribeToMenuStack;\n    /**\n     * Close the open menu if the current active item opened the requested MenuStackItem.\n     * @param item the MenuStackItem requested to be closed.\n     */\n    private _closeOpenMenu;\n    /**\n     * Set focus to either the current, previous or next item based on the FocusNext event, then\n     * open the previous or next item.\n     */\n    private _toggleOpenMenu;\n    /**\n     * @return true if the menu bar is configured to be horizontal.\n     */\n    private _isHorizontal;\n    /**\n     * Subscribe to the menu trigger's open events in order to track the trigger which opened the menu\n     * and stop tracking it when the menu is closed.\n     */\n    private _subscribeToMenuOpen;\n    /** Return true if the MenuBar has an open submenu. */\n    private _hasOpenSubmenu;\n    ngOnDestroy(): void;\n}\n"]}