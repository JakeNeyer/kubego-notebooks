{"version":3,"file":"selection.d.ts","sources":["selection.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { CollectionViewer, DataSource, ListRange } from '@angular/cdk/collections';\nimport { AfterContentChecked, EventEmitter, OnDestroy, OnInit, TrackByFunction } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SelectionChange } from './selection-set';\n/**\n * Manages the selection states of the items and provides methods to check and update the selection\n * states.\n * It must be applied to the parent element if `cdkSelectionToggle`, `cdkSelectAll`,\n * `cdkRowSelection` and `cdkSelectionColumn` are applied.\n */\nexport declare class CdkSelection<T> implements OnInit, AfterContentChecked, CollectionViewer, OnDestroy {\n    viewChange: Observable<ListRange>;\n    get dataSource(): TableDataSource<T>;\n    set dataSource(dataSource: TableDataSource<T>);\n    private _dataSource;\n    trackByFn: TrackByFunction<T>;\n    /** Whether to support multiple selection */\n    get multiple(): boolean;\n    set multiple(multiple: boolean);\n    protected _multiple: boolean;\n    /** Emits when selection changes. */\n    readonly change: EventEmitter<SelectionChange<T>>;\n    /** Latest data provided by the data source. */\n    private _data;\n    /** Subscription that listens for the data provided by the data source.  */\n    private _renderChangeSubscription;\n    private _destroyed;\n    private _selection;\n    private _switchDataSource;\n    private _observeRenderChanges;\n    ngOnInit(): void;\n    ngAfterContentChecked(): void;\n    ngOnDestroy(): void;\n    /** Toggles selection for a given value. `index` is required if `trackBy` is used. */\n    toggleSelection(value: T, index?: number): void;\n    /**\n     * Toggles select-all. If no value is selected, select all values. If all values or some of the\n     * values are selected, de-select all values.\n     */\n    toggleSelectAll(): void;\n    /** Checks whether a value is selected. `index` is required if `trackBy` is used. */\n    isSelected(value: T, index?: number): boolean;\n    /** Checks whether all values are selected. */\n    isAllSelected(): boolean;\n    /** Checks whether partially selected. */\n    isPartialSelected(): boolean;\n    private _selectAll;\n    private _clearAll;\n    private _updateSelectAllState;\n    selectAllState: SelectAllState;\n    static ngAcceptInputType_multiple: BooleanInput;\n}\ndeclare type SelectAllState = 'all' | 'none' | 'partial';\ndeclare type TableDataSource<T> = DataSource<T> | Observable<readonly T[]> | readonly T[];\nexport {};\n"]}