{"version":3,"file":"select-all.d.ts","sources":["select-all.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { CdkSelection } from './selection';\n/**\n * Makes the element a select-all toggle.\n *\n * Must be used within a parent `CdkSelection` directive. It toggles the selection states\n * of all the selection toggles connected with the `CdkSelection` directive.\n * If the element implements `ControlValueAccessor`, e.g. `MatCheckbox`, the directive\n * automatically connects it with the select-all state provided by the `CdkSelection` directive. If\n * not, use `checked$` to get the checked state, `indeterminate$` to get the indeterminate state,\n * and `toggle()` to change the selection state.\n */\nexport declare class CdkSelectAll<T> implements OnDestroy, OnInit {\n    private readonly _selection;\n    private readonly _controlValueAccessor;\n    /**\n     * The checked state of the toggle.\n     * Resolves to `true` if all the values are selected, `false` if no value is selected.\n     */\n    readonly checked: Observable<boolean>;\n    /**\n     * The indeterminate state of the toggle.\n     * Resolves to `true` if part (not all) of the values are selected, `false` if all values or no\n     * value at all are selected.\n     */\n    readonly indeterminate: Observable<boolean>;\n    /**\n     * Toggles the select-all state.\n     * @param event The click event if the toggle is triggered by a (mouse or keyboard) click. If\n     *     using with a native `<input type=\"checkbox\">`, the parameter is required for the\n     *     indeterminate state to work properly.\n     */\n    toggle(event?: MouseEvent): void;\n    private readonly _destroyed;\n    constructor(_selection: CdkSelection<T>, _controlValueAccessor: ControlValueAccessor[]);\n    ngOnInit(): void;\n    private _configureControlValueAccessor;\n    private _assertValidParentSelection;\n    ngOnDestroy(): void;\n}\n"]}