{"version":3,"file":"event-dispatcher.d.ts","sources":["event-dispatcher.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n/** Coordinates events between the column resize directives. */\nexport declare class HeaderRowEventDispatcher {\n    private readonly _ngZone;\n    /**\n     * Emits the currently hovered header cell or null when no header cells are hovered.\n     * Exposed publicly for events to feed in, but subscribers should use headerCellHoveredDistinct,\n     * defined below.\n     */\n    readonly headerCellHovered: Subject<Element | null>;\n    /**\n     * Emits the header cell for which a user-triggered resize is active or null\n     * when no resize is in progress.\n     */\n    readonly overlayHandleActiveForCell: Subject<Element | null>;\n    constructor(_ngZone: NgZone);\n    /** Distinct and shared version of headerCellHovered. */\n    readonly headerCellHoveredDistinct: Observable<Element | null>;\n    /**\n     * Emits the header that is currently hovered or hosting an active resize event (with active\n     * taking precedence).\n     */\n    readonly headerRowHoveredOrActiveDistinct: Observable<Element | null>;\n    private readonly _headerRowHoveredOrActiveDistinctReenterZone;\n    private _lastSeenRow;\n    private _lastSeenRowHover;\n    /**\n     * Emits whether the specified row should show its overlay controls.\n     * Emission occurs within the NgZone.\n     */\n    resizeOverlayVisibleForHeaderRow(row: Element): Observable<boolean>;\n    private _enterZone;\n}\n"]}