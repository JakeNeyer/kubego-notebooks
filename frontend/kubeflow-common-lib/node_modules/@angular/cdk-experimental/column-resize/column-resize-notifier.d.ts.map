{"version":3,"file":"column-resize-notifier.d.ts","sources":["column-resize-notifier.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable, Subject } from 'rxjs';\n/** Indicates the width of a column. */\nexport interface ColumnSize {\n    /** The ID/name of the column, as defined in CdkColumnDef. */\n    readonly columnId: string;\n    /** The width in pixels of the column. */\n    readonly size: number;\n    /** The width in pixels of the column prior to this update, if known. */\n    readonly previousSize?: number;\n}\n/** Interface describing column size changes. */\nexport interface ColumnSizeAction extends ColumnSize {\n    /**\n     * Whether the resize action should be applied instantaneously. False for events triggered during\n     * a UI-triggered resize (such as with the mouse) until the mouse button is released. True\n     * for all programmatically triggered resizes.\n     */\n    readonly completeImmediately?: boolean;\n    /**\n     * Whether the resize action is being applied to a sticky/stickyEnd column.\n     */\n    readonly isStickyColumn?: boolean;\n}\n/**\n * Originating source of column resize events within a table.\n * @docs-private\n */\nexport declare class ColumnResizeNotifierSource {\n    /** Emits when an in-progress resize is canceled. */\n    readonly resizeCanceled: Subject<ColumnSizeAction>;\n    /** Emits when a resize is applied. */\n    readonly resizeCompleted: Subject<ColumnSize>;\n    /** Triggers a resize action. */\n    readonly triggerResize: Subject<ColumnSizeAction>;\n}\n/** Service for triggering column resizes imperatively or being notified of them. */\nexport declare class ColumnResizeNotifier {\n    private readonly _source;\n    /** Emits whenever a column is resized. */\n    readonly resizeCompleted: Observable<ColumnSize>;\n    constructor(_source: ColumnResizeNotifierSource);\n    /** Instantly resizes the specified column. */\n    resize(columnId: string, size: number): void;\n}\n"]}