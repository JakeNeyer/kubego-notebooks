{"version":3,"file":"resizable.d.ts","sources":["resizable.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterViewInit, ElementRef, Injector, NgZone, OnDestroy, Type, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkColumnDef, _CoalescedStyleScheduler } from '@angular/cdk/table';\nimport { Subject } from 'rxjs';\nimport { ResizeOverlayHandle } from './overlay-handle';\nimport { ColumnResize } from './column-resize';\nimport { ColumnResizeNotifierSource } from './column-resize-notifier';\nimport { HeaderRowEventDispatcher } from './event-dispatcher';\nimport { ResizeStrategy } from './resize-strategy';\n/**\n * Base class for Resizable directives which are applied to column headers to make those columns\n * resizable.\n */\nexport declare abstract class Resizable<HandleComponent extends ResizeOverlayHandle> implements AfterViewInit, OnDestroy {\n    protected minWidthPxInternal: number;\n    protected maxWidthPxInternal: number;\n    protected inlineHandle?: HTMLElement;\n    protected overlayRef?: OverlayRef;\n    protected readonly destroyed: Subject<void>;\n    protected abstract readonly columnDef: CdkColumnDef;\n    protected abstract readonly columnResize: ColumnResize;\n    protected abstract readonly directionality: Directionality;\n    protected abstract readonly document: Document;\n    protected abstract readonly elementRef: ElementRef;\n    protected abstract readonly eventDispatcher: HeaderRowEventDispatcher;\n    protected abstract readonly injector: Injector;\n    protected abstract readonly ngZone: NgZone;\n    protected abstract readonly overlay: Overlay;\n    protected abstract readonly resizeNotifier: ColumnResizeNotifierSource;\n    protected abstract readonly resizeStrategy: ResizeStrategy;\n    protected abstract readonly styleScheduler: _CoalescedStyleScheduler;\n    protected abstract readonly viewContainerRef: ViewContainerRef;\n    protected abstract readonly changeDetectorRef: ChangeDetectorRef;\n    private _viewInitialized;\n    /** The minimum width to allow the column to be sized to. */\n    get minWidthPx(): number;\n    set minWidthPx(value: number);\n    /** The maximum width to allow the column to be sized to. */\n    get maxWidthPx(): number;\n    set maxWidthPx(value: number);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    protected abstract getInlineHandleCssClassName(): string;\n    protected abstract getOverlayHandleComponentType(): Type<HandleComponent>;\n    private _createOverlayForHandle;\n    private _listenForRowHoverEvents;\n    private _listenForResizeEvents;\n    private _completeResizeOperation;\n    private _cleanUpAfterResize;\n    private _createHandlePortal;\n    private _showHandleOverlay;\n    private _updateOverlayHandleHeight;\n    private _applySize;\n    private _applyMinWidthPx;\n    private _applyMaxWidthPx;\n    private _appendInlineHandle;\n}\n"]}