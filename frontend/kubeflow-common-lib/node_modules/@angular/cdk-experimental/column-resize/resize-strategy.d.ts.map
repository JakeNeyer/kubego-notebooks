{"version":3,"file":"resize-strategy.d.ts","sources":["resize-strategy.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy, Provider } from '@angular/core';\nimport { CdkTable, _CoalescedStyleScheduler } from '@angular/cdk/table';\nimport { ColumnResize } from './column-resize';\n/**\n * Provides an implementation for resizing a column.\n * The details of how resizing works for tables for flex mat-tables are quite different.\n */\nexport declare abstract class ResizeStrategy {\n    protected abstract readonly columnResize: ColumnResize;\n    protected abstract readonly styleScheduler: _CoalescedStyleScheduler;\n    protected abstract readonly table: CdkTable<unknown>;\n    private _pendingResizeDelta;\n    /** Updates the width of the specified column. */\n    abstract applyColumnSize(cssFriendlyColumnName: string, columnHeader: HTMLElement, sizeInPx: number, previousSizeInPx?: number): void;\n    /** Applies a minimum width to the specified column, updating its current width as needed. */\n    abstract applyMinColumnSize(cssFriendlyColumnName: string, columnHeader: HTMLElement, minSizeInPx: number): void;\n    /** Applies a maximum width to the specified column, updating its current width as needed. */\n    abstract applyMaxColumnSize(cssFriendlyColumnName: string, columnHeader: HTMLElement, minSizeInPx: number): void;\n    /** Adjusts the width of the table element by the specified delta. */\n    protected updateTableWidthAndStickyColumns(delta: number): void;\n}\n/**\n * The optimially performing resize strategy for &lt;table&gt; elements with table-layout: fixed.\n * Tested against and outperformed:\n *   CSS selector\n *   CSS selector w/ CSS variable\n *   Updating all cell nodes\n */\nexport declare class TableLayoutFixedResizeStrategy extends ResizeStrategy {\n    protected readonly columnResize: ColumnResize;\n    protected readonly styleScheduler: _CoalescedStyleScheduler;\n    protected readonly table: CdkTable<unknown>;\n    constructor(columnResize: ColumnResize, styleScheduler: _CoalescedStyleScheduler, table: CdkTable<unknown>);\n    applyColumnSize(_: string, columnHeader: HTMLElement, sizeInPx: number, previousSizeInPx?: number): void;\n    applyMinColumnSize(_: string, columnHeader: HTMLElement, sizeInPx: number): void;\n    applyMaxColumnSize(_: string, columnHeader: HTMLElement, sizeInPx: number): void;\n}\n/**\n * The optimally performing resize strategy for flex mat-tables.\n * Tested against and outperformed:\n *   CSS selector w/ CSS variable\n *   Updating all mat-cell nodes\n */\nexport declare class CdkFlexTableResizeStrategy extends ResizeStrategy implements OnDestroy {\n    protected readonly columnResize: ColumnResize;\n    protected readonly styleScheduler: _CoalescedStyleScheduler;\n    protected readonly table: CdkTable<unknown>;\n    private readonly _document;\n    private readonly _columnIndexes;\n    private readonly _columnProperties;\n    private _styleElement?;\n    private _indexSequence;\n    protected readonly defaultMinSize = 0;\n    protected readonly defaultMaxSize: number;\n    constructor(columnResize: ColumnResize, styleScheduler: _CoalescedStyleScheduler, table: CdkTable<unknown>, document: any);\n    applyColumnSize(cssFriendlyColumnName: string, columnHeader: HTMLElement, sizeInPx: number, previousSizeInPx?: number): void;\n    applyMinColumnSize(cssFriendlyColumnName: string, _: HTMLElement, sizeInPx: number): void;\n    applyMaxColumnSize(cssFriendlyColumnName: string, _: HTMLElement, sizeInPx: number): void;\n    protected getColumnCssClass(cssFriendlyColumnName: string): string;\n    ngOnDestroy(): void;\n    private _getPropertyValue;\n    private _getAppliedWidth;\n    private _applyProperty;\n    private _getStyleSheet;\n    private _getColumnPropertiesMap;\n    private _applySizeCss;\n}\nexport declare const TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER: Provider;\nexport declare const FLEX_RESIZE_STRATEGY_PROVIDER: Provider;\n"]}