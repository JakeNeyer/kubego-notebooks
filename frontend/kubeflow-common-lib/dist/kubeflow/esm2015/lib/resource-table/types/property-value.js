import { get as getAttributeValue } from 'lodash';
// Single Text field
export var TRUNCATE_TEXT_SIZE;
(function (TRUNCATE_TEXT_SIZE) {
    TRUNCATE_TEXT_SIZE["NO_TRUNCATE"] = "none";
    TRUNCATE_TEXT_SIZE["SMALL"] = "text-small";
    TRUNCATE_TEXT_SIZE["MEDIUM"] = "text-medium";
    TRUNCATE_TEXT_SIZE["LARGE"] = "text-large";
})(TRUNCATE_TEXT_SIZE || (TRUNCATE_TEXT_SIZE = {}));
export class PropertyValue {
    constructor(config) {
        this.defaultValues = {
            field: '',
            tooltipField: '',
            popoverField: '',
            truncate: TRUNCATE_TEXT_SIZE.NO_TRUNCATE,
            isLink: false,
        };
        const { field, valueFn, tooltipField, popoverField, truncate, isLink } = Object.assign(Object.assign({}, this.defaultValues), config);
        this.field = field;
        this.valueFn = valueFn;
        this.tooltipField = tooltipField;
        this.popoverField = popoverField;
        this.truncate = truncate;
        this.isLink = isLink;
    }
    getClasses() {
        const classes = [];
        if (this.isLink) {
            classes.push('link');
        }
        if (this.truncate === TRUNCATE_TEXT_SIZE.NO_TRUNCATE) {
            return classes;
        }
        classes.push(...['truncate', this.truncate]);
        return classes;
    }
    getTooltip(row) {
        if (this.tooltipField.length === 0) {
            return '';
        }
        return getAttributeValue(row, this.tooltipField);
    }
    getPopover(row) {
        if (this.popoverField.length === 0) {
            return '';
        }
        return getAttributeValue(row, this.popoverField);
    }
    getValue(row) {
        if (this.valueFn) {
            return this.valueFn(row);
        }
        return getAttributeValue(row, this.field);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktdmFsdWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9rdWJlZmxvdy9zcmMvbGliL3Jlc291cmNlLXRhYmxlL3R5cGVzL3Byb3BlcnR5LXZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLElBQUksaUJBQWlCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFbEQsb0JBQW9CO0FBQ3BCLE1BQU0sQ0FBTixJQUFZLGtCQUtYO0FBTEQsV0FBWSxrQkFBa0I7SUFDNUIsMENBQW9CLENBQUE7SUFDcEIsMENBQW9CLENBQUE7SUFDcEIsNENBQXNCLENBQUE7SUFDdEIsMENBQW9CLENBQUE7QUFDdEIsQ0FBQyxFQUxXLGtCQUFrQixLQUFsQixrQkFBa0IsUUFLN0I7QUFXRCxNQUFNLE9BQU8sYUFBYTtJQWdCeEIsWUFBWSxNQUFzQjtRQVIxQixrQkFBYSxHQUFtQjtZQUN0QyxLQUFLLEVBQUUsRUFBRTtZQUNULFlBQVksRUFBRSxFQUFFO1lBQ2hCLFlBQVksRUFBRSxFQUFFO1lBQ2hCLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxXQUFXO1lBQ3hDLE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQztRQUdBLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxtQ0FDakUsSUFBSSxDQUFDLGFBQWEsR0FDbEIsTUFBTSxDQUNWLENBQUM7UUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsVUFBVTtRQUNSLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUVuQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLGtCQUFrQixDQUFDLFdBQVcsRUFBRTtZQUNwRCxPQUFPLE9BQU8sQ0FBQztTQUNoQjtRQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM3QyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsVUFBVSxDQUFDLEdBQVE7UUFDakIsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEMsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELE9BQU8saUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsVUFBVSxDQUFDLEdBQVE7UUFDakIsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEMsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELE9BQU8saUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsUUFBUSxDQUFDLEdBQVE7UUFDZixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFCO1FBRUQsT0FBTyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldCBhcyBnZXRBdHRyaWJ1dGVWYWx1ZSB9IGZyb20gJ2xvZGFzaCc7XG5cbi8vIFNpbmdsZSBUZXh0IGZpZWxkXG5leHBvcnQgZW51bSBUUlVOQ0FURV9URVhUX1NJWkUge1xuICBOT19UUlVOQ0FURSA9ICdub25lJyxcbiAgU01BTEwgPSAndGV4dC1zbWFsbCcsXG4gIE1FRElVTSA9ICd0ZXh0LW1lZGl1bScsXG4gIExBUkdFID0gJ3RleHQtbGFyZ2UnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BlcnR5Q29uZmlnIHtcbiAgZmllbGQ/OiBzdHJpbmc7XG4gIHZhbHVlRm4/OiAocm93OiBhbnkpID0+IGFueTtcbiAgdG9vbHRpcEZpZWxkPzogc3RyaW5nO1xuICBwb3BvdmVyRmllbGQ/OiBzdHJpbmc7XG4gIHRydW5jYXRlPzogVFJVTkNBVEVfVEVYVF9TSVpFO1xuICBpc0xpbms/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgUHJvcGVydHlWYWx1ZSB7XG4gIGZpZWxkOiBzdHJpbmc7XG4gIHRvb2x0aXBGaWVsZDogc3RyaW5nO1xuICB2YWx1ZUZuPzogKHJvdzogYW55KSA9PiBhbnk7XG4gIHBvcG92ZXJGaWVsZDogc3RyaW5nO1xuICB0cnVuY2F0ZTogVFJVTkNBVEVfVEVYVF9TSVpFO1xuICBpc0xpbms6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBkZWZhdWx0VmFsdWVzOiBQcm9wZXJ0eUNvbmZpZyA9IHtcbiAgICBmaWVsZDogJycsXG4gICAgdG9vbHRpcEZpZWxkOiAnJyxcbiAgICBwb3BvdmVyRmllbGQ6ICcnLFxuICAgIHRydW5jYXRlOiBUUlVOQ0FURV9URVhUX1NJWkUuTk9fVFJVTkNBVEUsXG4gICAgaXNMaW5rOiBmYWxzZSxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFByb3BlcnR5Q29uZmlnKSB7XG4gICAgY29uc3QgeyBmaWVsZCwgdmFsdWVGbiwgdG9vbHRpcEZpZWxkLCBwb3BvdmVyRmllbGQsIHRydW5jYXRlLCBpc0xpbmsgfSA9IHtcbiAgICAgIC4uLnRoaXMuZGVmYXVsdFZhbHVlcyxcbiAgICAgIC4uLmNvbmZpZyxcbiAgICB9O1xuICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICB0aGlzLnZhbHVlRm4gPSB2YWx1ZUZuO1xuICAgIHRoaXMudG9vbHRpcEZpZWxkID0gdG9vbHRpcEZpZWxkO1xuICAgIHRoaXMucG9wb3ZlckZpZWxkID0gcG9wb3ZlckZpZWxkO1xuICAgIHRoaXMudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICB0aGlzLmlzTGluayA9IGlzTGluaztcbiAgfVxuXG4gIGdldENsYXNzZXMoKSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IFtdO1xuXG4gICAgaWYgKHRoaXMuaXNMaW5rKSB7XG4gICAgICBjbGFzc2VzLnB1c2goJ2xpbmsnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50cnVuY2F0ZSA9PT0gVFJVTkNBVEVfVEVYVF9TSVpFLk5PX1RSVU5DQVRFKSB7XG4gICAgICByZXR1cm4gY2xhc3NlcztcbiAgICB9XG5cbiAgICBjbGFzc2VzLnB1c2goLi4uWyd0cnVuY2F0ZScsIHRoaXMudHJ1bmNhdGVdKTtcbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfVxuXG4gIGdldFRvb2x0aXAocm93OiBhbnkpIHtcbiAgICBpZiAodGhpcy50b29sdGlwRmllbGQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKHJvdywgdGhpcy50b29sdGlwRmllbGQpO1xuICB9XG5cbiAgZ2V0UG9wb3Zlcihyb3c6IGFueSkge1xuICAgIGlmICh0aGlzLnBvcG92ZXJGaWVsZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0QXR0cmlidXRlVmFsdWUocm93LCB0aGlzLnBvcG92ZXJGaWVsZCk7XG4gIH1cblxuICBnZXRWYWx1ZShyb3c6IGFueSkge1xuICAgIGlmICh0aGlzLnZhbHVlRm4pIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlRm4ocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0QXR0cmlidXRlVmFsdWUocm93LCB0aGlzLmZpZWxkKTtcbiAgfVxufVxuIl19