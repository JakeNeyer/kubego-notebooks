// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/config": {
            "get": {
                "description": "Get Config",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/output.Config"
                        }
                    }
                }
            }
        },
        "/gpus": {
            "get": {
                "description": "Get GPU vendors",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GPUS"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/output.GPUVendors"
                        }
                    }
                }
            }
        },
        "/namespaces": {
            "get": {
                "description": "Get Namespaces",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespaces"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace}/notebooks": {
            "get": {
                "description": "Get Notebooks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notebooks"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/output.Notebooks"
                        }
                    }
                }
            },
            "post": {
                "description": "Create Notebook",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notebooks"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Notebook info",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/input.Notebook"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/namespaces/{namespace}/notebooks/{notebook}": {
            "get": {
                "description": "Get Notebook",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notebooks"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Notebook",
                        "name": "notebook",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/output.Notebook"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace}/poddefaults": {
            "get": {
                "description": "Get pod defaults",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Defaults"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/output.PodDefaults"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace}/pvcs": {
            "get": {
                "description": "Get pvcs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVCs"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/output.PVCs"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace}/{notebook}": {
            "delete": {
                "description": "Delete Notebook",
                "tags": [
                    "Notebooks"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Notebook",
                        "name": "notebook",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    }
                }
            },
            "patch": {
                "description": "Patch Notebook",
                "tags": [
                    "Notebooks"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Notebook",
                        "name": "notebook",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Notebook info",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/input.StartStop"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/storageclasses": {
            "get": {
                "description": "Get storage classes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StorageClasses"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/storageclasses/default": {
            "get": {
                "description": "Get default storage class",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StorageClasses"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/output.DefaultStorageClass"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.AffinityConfig": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.AffinityOption"
                    }
                },
                "readOnly": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "common.AffinityOption": {
            "type": "object",
            "properties": {
                "affinity": {
                    "$ref": "#/definitions/v1.Affinity"
                },
                "configKey": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "common.CPU": {
            "type": "object",
            "properties": {
                "limitFactor": {
                    "type": "string"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "common.Configurations": {
            "type": "object",
            "properties": {
                "readOnly": {
                    "type": "boolean"
                },
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "common.Environment": {
            "type": "object",
            "properties": {
                "readOnly": {
                    "type": "boolean"
                },
                "value": {
                    "$ref": "#/definitions/common.EnvironmentValue"
                }
            }
        },
        "common.EnvironmentValue": {
            "type": "object"
        },
        "common.Gpus": {
            "type": "object",
            "properties": {
                "readOnly": {
                    "type": "boolean"
                },
                "value": {
                    "$ref": "#/definitions/common.GpusValue"
                }
            }
        },
        "common.GpusValue": {
            "type": "object",
            "properties": {
                "num": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                },
                "vendors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.Vendor"
                    }
                }
            }
        },
        "common.Image": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "readOnly": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "common.ImageGroup": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "common.ImagePullPolicy": {
            "type": "object",
            "properties": {
                "readOnly": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "common.Option": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "groupKey": {
                    "type": "string"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.Toleration"
                    }
                }
            }
        },
        "common.Shm": {
            "type": "object",
            "properties": {
                "readOnly": {
                    "type": "boolean"
                },
                "value": {
                    "type": "boolean"
                }
            }
        },
        "common.SpawnerFormDefaults": {
            "type": "object",
            "properties": {
                "affinityConfig": {
                    "$ref": "#/definitions/common.AffinityConfig"
                },
                "allowCustomImage": {
                    "type": "boolean"
                },
                "configurations": {
                    "$ref": "#/definitions/common.Configurations"
                },
                "cpu": {
                    "$ref": "#/definitions/common.CPU"
                },
                "dataVolumes": {
                    "$ref": "#/definitions/common.Configurations"
                },
                "environment": {
                    "$ref": "#/definitions/common.Environment"
                },
                "gpus": {
                    "$ref": "#/definitions/common.Gpus"
                },
                "hideRegistry": {
                    "type": "boolean"
                },
                "hideTag": {
                    "type": "boolean"
                },
                "image": {
                    "$ref": "#/definitions/common.Image"
                },
                "imageGroupOne": {
                    "$ref": "#/definitions/common.ImageGroup"
                },
                "imageGroupTwo": {
                    "$ref": "#/definitions/common.ImageGroup"
                },
                "imagePullPolicy": {
                    "$ref": "#/definitions/common.ImagePullPolicy"
                },
                "memory": {
                    "$ref": "#/definitions/common.CPU"
                },
                "shm": {
                    "$ref": "#/definitions/common.Shm"
                },
                "tolerationGroup": {
                    "$ref": "#/definitions/common.TolerationGroup"
                },
                "workspaceVolume": {
                    "$ref": "#/definitions/common.WorkspaceVolume"
                }
            }
        },
        "common.Toleration": {
            "type": "object",
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "common.TolerationGroup": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.Option"
                    }
                },
                "readOnly": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "common.Vendor": {
            "type": "object",
            "properties": {
                "limitsKey": {
                    "type": "string"
                },
                "uiName": {
                    "type": "string"
                }
            }
        },
        "common.WorkspaceVolume": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/common.WorkspaceVolumeValue"
                }
            }
        },
        "common.WorkspaceVolumeValue": {
            "type": "object",
            "properties": {
                "accessModes": {
                    "$ref": "#/definitions/common.ImagePullPolicy"
                },
                "class": {
                    "$ref": "#/definitions/common.ImagePullPolicy"
                },
                "mountPath": {
                    "$ref": "#/definitions/common.ImagePullPolicy"
                },
                "name": {
                    "$ref": "#/definitions/common.ImagePullPolicy"
                },
                "size": {
                    "$ref": "#/definitions/common.ImagePullPolicy"
                },
                "type": {
                    "$ref": "#/definitions/common.ImagePullPolicy"
                }
            }
        },
        "input.Datavolume": {
            "type": "object",
            "properties": {
                "class": {
                    "type": "string"
                },
                "extraFields": {
                    "$ref": "#/definitions/input.ExtraFields"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "templatedName": {
                    "type": "string"
                },
                "templatedPath": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "input.ExtraFields": {
            "type": "object"
        },
        "input.Gpus": {
            "type": "object",
            "properties": {
                "num": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                },
                "vendors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "input.Notebook": {
            "type": "object",
            "properties": {
                "affinityConfig": {
                    "type": "string"
                },
                "allowCustomImage": {
                    "type": "boolean"
                },
                "configurations": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "cpu": {
                    "type": "string"
                },
                "cpuLimit": {
                    "type": "string"
                },
                "customImage": {
                    "type": "string"
                },
                "customImageCheck": {
                    "type": "boolean"
                },
                "datavols": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/input.Datavolume"
                    }
                },
                "gpus": {
                    "$ref": "#/definitions/input.Gpus"
                },
                "image": {
                    "type": "string"
                },
                "imagePullPolicy": {
                    "type": "string"
                },
                "memory": {
                    "type": "string"
                },
                "memoryLimit": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "noWorkspace": {
                    "type": "boolean"
                },
                "serverType": {
                    "type": "string"
                },
                "shm": {
                    "type": "boolean"
                },
                "tolerationGroup": {
                    "type": "string"
                },
                "workspace": {
                    "$ref": "#/definitions/input.Datavolume"
                }
            }
        },
        "input.StartStop": {
            "type": "object",
            "properties": {
                "stopped": {
                    "type": "boolean"
                }
            }
        },
        "output.Config": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/common.SpawnerFormDefaults"
                }
            }
        },
        "output.DefaultStorageClass": {
            "type": "object",
            "properties": {
                "defaultStorageClass": {
                    "type": "string"
                }
            }
        },
        "output.GPUVendors": {
            "type": "object",
            "properties": {
                "vendors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "output.Gpus": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "output.Notebook": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "string"
                },
                "cpu": {
                    "type": "string"
                },
                "gpus": {
                    "$ref": "#/definitions/output.Gpus"
                },
                "image": {
                    "type": "string"
                },
                "memory": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "serverType": {
                    "type": "string"
                },
                "shortImage": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/output.Status"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "output.Notebooks": {
            "type": "object",
            "properties": {
                "notebooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/output.Notebook"
                    }
                }
            }
        },
        "output.PVC": {
            "type": "object",
            "properties": {
                "class": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                }
            }
        },
        "output.PVCs": {
            "type": "object",
            "properties": {
                "pvcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/output.PVC"
                    }
                }
            }
        },
        "output.PodDefault": {
            "type": "object",
            "properties": {
                "desc": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "output.PodDefaults": {
            "type": "object",
            "properties": {
                "poddefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/output.PodDefault"
                    }
                }
            }
        },
        "output.Status": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "phase": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "v1.Affinity": {
            "type": "object",
            "properties": {
                "nodeAffinity": {
                    "description": "Describes node affinity scheduling rules for the pod.\n+optional",
                    "$ref": "#/definitions/v1.NodeAffinity"
                },
                "podAffinity": {
                    "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "$ref": "#/definitions/v1.PodAffinity"
                },
                "podAntiAffinity": {
                    "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "$ref": "#/definitions/v1.PodAntiAffinity"
                }
            }
        },
        "v1.LabelSelector": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LabelSelectorRequirement"
                    }
                },
                "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.LabelSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "key is the label key that the selector applies to.\n+patchMergeKey=key\n+patchStrategy=merge",
                    "type": "string"
                },
                "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                },
                "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.NodeAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PreferredSchedulingTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.\n+optional",
                    "$ref": "#/definitions/v1.NodeSelector"
                }
            }
        },
        "v1.NodeSelector": {
            "type": "object",
            "properties": {
                "nodeSelectorTerms": {
                    "description": "Required. A list of node selector terms. The terms are ORed.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorTerm"
                    }
                }
            }
        },
        "v1.NodeSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                    "type": "string"
                },
                "values": {
                    "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.NodeSelectorTerm": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "A list of node selector requirements by node's labels.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                },
                "matchFields": {
                    "description": "A list of node selector requirements by node's fields.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                }
            }
        },
        "v1.PodAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PodAffinityTerm": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "A label query over a set of resources, in this case pods.\n+optional",
                    "$ref": "#/definitions/v1.LabelSelector"
                },
                "namespaces": {
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against);\nnull or empty list means \"this pod's namespace\"\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "topologyKey": {
                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                    "type": "string"
                }
            }
        },
        "v1.PodAntiAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PreferredSchedulingTerm": {
            "type": "object",
            "properties": {
                "preference": {
                    "description": "A node selector term, associated with the corresponding weight.",
                    "$ref": "#/definitions/v1.NodeSelectorTerm"
                },
                "weight": {
                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                    "type": "integer"
                }
            }
        },
        "v1.WeightedPodAffinityTerm": {
            "type": "object",
            "properties": {
                "podAffinityTerm": {
                    "description": "Required. A pod affinity term, associated with the corresponding weight.",
                    "$ref": "#/definitions/v1.PodAffinityTerm"
                },
                "weight": {
                    "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
